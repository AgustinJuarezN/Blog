import { Injectable } from '@angular/core';
import { ofType, createEffect } from '@ngrx/effects';
import { tap } from 'rxjs/operators';
import * as ErrorHandlerActions from './error-handler.actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@angular/router";
import * as i3 from "ngx-toastr";
export class ErrorHandlerEffects {
    constructor(actions$, router, toast) {
        this.actions$ = actions$;
        this.router = router;
        this.toast = toast;
        this.on401$ = createEffect(() => this.actions$.pipe(ofType(ErrorHandlerActions.throw401Error), tap(({ error }) => this.toast.error(error.error, "Not Authorized")), tap(() => this.router.navigate(['/private/articles']))), { dispatch: false });
        this.on403$ = createEffect(() => this.actions$.pipe(ofType(ErrorHandlerActions.throw403Error), tap(() => this.router.navigate(['/access-denied']))), { dispatch: false });
        this.on404$ = createEffect(() => this.actions$.pipe(ofType(ErrorHandlerActions.throw404Error), tap(() => this.router.navigate(['/not-found']))), { dispatch: false });
    }
}
ErrorHandlerEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ErrorHandlerEffects, deps: [{ token: i1.Actions }, { token: i2.Router }, { token: i3.ToastrService }], target: i0.ɵɵFactoryTarget.Injectable });
ErrorHandlerEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ErrorHandlerEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ErrorHandlerEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.Router }, { type: i3.ToastrService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2Vycm9yLWhhbmRsZXIvc3RvcmUvZXJyb3ItaGFuZGxlci5lZmZlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFXLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7QUFJL0QsTUFBTSxPQUFPLG1CQUFtQjtJQTZCOUIsWUFBNkIsUUFBaUIsRUFBbUIsTUFBYyxFQUFVLEtBQXFCO1FBQWpGLGFBQVEsR0FBUixRQUFRLENBQVM7UUFBbUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBNUI5RyxXQUFNLEdBQUcsWUFBWSxDQUNuQixHQUFHLEVBQUUsQ0FDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxFQUN6QyxHQUFHLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLGdCQUFnQixDQUFDLENBQUMsRUFDaEUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQ3ZELEVBQ0gsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQ3BCLENBQUM7UUFFRixXQUFNLEdBQUcsWUFBWSxDQUNuQixHQUFHLEVBQUUsQ0FDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxFQUN6QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FDcEQsRUFDSCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FDcEIsQ0FBQztRQUVGLFdBQU0sR0FBRyxZQUFZLENBQ25CLEdBQUcsRUFBRSxDQUNILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLEVBQ3pDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FDaEQsRUFDSCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FDcEIsQ0FBQztJQUUrRyxDQUFDOztnSEE3QnZHLG1CQUFtQjtvSEFBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEFjdGlvbnMsIG9mVHlwZSwgY3JlYXRlRWZmZWN0IH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0ICogYXMgRXJyb3JIYW5kbGVyQWN0aW9ucyBmcm9tICcuL2Vycm9yLWhhbmRsZXIuYWN0aW9ucyc7XHJcbmltcG9ydCB7VG9hc3RyU2VydmljZX0gZnJvbSBcIm5neC10b2FzdHJcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlckVmZmVjdHMge1xyXG4gIG9uNDAxJCA9IGNyZWF0ZUVmZmVjdChcclxuICAgICgpID0+XHJcbiAgICAgIHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoRXJyb3JIYW5kbGVyQWN0aW9ucy50aHJvdzQwMUVycm9yKSxcclxuICAgICAgICB0YXAoKHtlcnJvcn0pID0+IHRoaXMudG9hc3QuZXJyb3IoZXJyb3IuZXJyb3IsXCJOb3QgQXV0aG9yaXplZFwiKSksXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3ByaXZhdGUvYXJ0aWNsZXMnXSkpLFxyXG4gICAgICApLFxyXG4gICAgeyBkaXNwYXRjaDogZmFsc2UgfSxcclxuICApO1xyXG4gIFxyXG4gIG9uNDAzJCA9IGNyZWF0ZUVmZmVjdChcclxuICAgICgpID0+XHJcbiAgICAgIHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoRXJyb3JIYW5kbGVyQWN0aW9ucy50aHJvdzQwM0Vycm9yKSxcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvYWNjZXNzLWRlbmllZCddKSksXHJcbiAgICAgICksXHJcbiAgICB7IGRpc3BhdGNoOiBmYWxzZSB9LFxyXG4gICk7XHJcblxyXG4gIG9uNDA0JCA9IGNyZWF0ZUVmZmVjdChcclxuICAgICgpID0+XHJcbiAgICAgIHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoRXJyb3JIYW5kbGVyQWN0aW9ucy50aHJvdzQwNEVycm9yKSxcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvbm90LWZvdW5kJ10pKSxcclxuICAgICAgKSxcclxuICAgIHsgZGlzcGF0Y2g6IGZhbHNlIH0sXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhY3Rpb25zJDogQWN0aW9ucywgcHJpdmF0ZSByZWFkb25seSByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSB0b2FzdCA6IFRvYXN0clNlcnZpY2UpIHt9XHJcbn1cclxuIl19