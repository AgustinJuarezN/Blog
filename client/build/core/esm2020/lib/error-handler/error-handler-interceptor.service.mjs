import { HttpErrorResponse } from '@angular/common/http';
import { inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { throw401Error, throw403Error, throw404Error } from "./store";
export const errorHandlingInterceptor = (request, next) => {
    const store = inject(Store);
    return next(request).pipe(catchError((error) => {
        if (error instanceof HttpErrorResponse) {
            switch (error.status) {
                case 401:
                    store.dispatch(throw401Error({ error }));
                    break;
                case 403:
                    store.dispatch(throw403Error({ error }));
                    break;
                case 404:
                    store.dispatch(throw404Error({ error }));
                    break;
                case 0:
                    console.log("ooOps something went wrong");
                    break;
                default:
                    throwError(error);
                    break;
            }
        }
        return throwError(error);
    }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2Vycm9yLWhhbmRsZXIvZXJyb3ItaGFuZGxlci1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBeUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXBFLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQ3RDLE9BQXlCLEVBQ3pCLElBQW1CLEVBQ1MsRUFBRTtJQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN2QixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNuQixJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRTtZQUN0QyxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ3BCLEtBQUssR0FBRztvQkFDTixLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDekMsTUFBTTtnQkFDUixLQUFLLEdBQUc7b0JBQ04sS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLE1BQU07Z0JBQ1IsS0FBSyxHQUFHO29CQUNOLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN6QyxNQUFNO2dCQUNSLEtBQUssQ0FBQztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUE7b0JBQ3pDLE1BQU07Z0JBQ1I7b0JBQ0UsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNsQixNQUFNO2FBQ1Q7U0FDRjtRQUNELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlckZuLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7dGhyb3c0MDFFcnJvciwgdGhyb3c0MDNFcnJvciwgdGhyb3c0MDRFcnJvcn0gZnJvbSBcIi4vc3RvcmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsaW5nSW50ZXJjZXB0b3IgPSAoXHJcbiAgcmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PixcclxuICBuZXh0OiBIdHRwSGFuZGxlckZuLFxyXG4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiA9PiB7XHJcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3QoU3RvcmUpO1xyXG5cclxuICByZXR1cm4gbmV4dChyZXF1ZXN0KS5waXBlKFxyXG4gICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xyXG4gICAgICAgICAgY2FzZSA0MDE6XHJcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHRocm93NDAxRXJyb3IoeyBlcnJvciB9KSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSA0MDM6XHJcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHRocm93NDAzRXJyb3IoeyBlcnJvciB9KSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSA0MDQ6XHJcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHRocm93NDA0RXJyb3IoeyBlcnJvciB9KSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9vT3BzIHNvbWV0aGluZyB3ZW50IHdyb25nXCIpXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3dFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XHJcbiAgICB9KSxcclxuICApO1xyXG59O1xyXG4iXX0=