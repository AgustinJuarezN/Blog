import { Component, Input } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "primeng/button";
import * as i2 from "@angular/common";
export class FileUploadFieldComponent {
    constructor() {
        this.accept = "image/*, audio/*, video/*";
        this.formControl = new FormControl([], {
            nonNullable: true
        });
        this.onChange = (value) => { };
        this.onTouched = () => { };
        this._componentDestroyed$ = new Subject();
    }
    onFileDrop(event) {
        event.preventDefault();
        const file = event.dataTransfer?.files.item(0);
        this.addFile(file);
    }
    onFileInput(event) {
        const file = event.target.files?.item(0);
        this.addFile(file);
    }
    async addFile(file) {
        if (file) {
            try {
                const uploadFile = await this.parseToUploadFile(file);
                const files = this.formControl.value ? [...this.formControl.value, uploadFile] : [uploadFile];
                this.formControl.setValue(files);
            }
            catch (error) {
                console.error('Error converting file to upload format', error);
            }
        }
    }
    parseToUploadFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = function () {
                if (reader.result) {
                    resolve({
                        data: reader.result.toString(),
                        name: file.name,
                        type: file.type.split('/')[1],
                        category: file.type.split('/')[0] // split and get 'image' from 'image/png'
                    });
                }
                else {
                    reject(new Error('Error reading file'));
                }
            };
            reader.onerror = function () {
                reject(new Error('Error reading file'));
            };
            reader.readAsDataURL(file);
        });
    }
    onDragOver(event) {
        event.preventDefault();
    }
    ngOnInit() {
        this.formControl.valueChanges
            .pipe(takeUntil(this._componentDestroyed$))
            .subscribe((value) => this.onChange(value));
    }
    ngOnDestroy() {
        this._componentDestroyed$.next();
        this._componentDestroyed$.complete();
    }
    removeFile(file) {
        const currentFiles = this.formControl.value;
        const updatedFiles = currentFiles.filter((f) => f !== file);
        this.formControl.setValue(updatedFiles);
    }
    // El problema es que cuando hago new value : File[]
    // pero cuando edito es de tipo : string[] (base 64)
    writeValue(files) {
        this.formControl.setValue(files);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
FileUploadFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: FileUploadFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FileUploadFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: FileUploadFieldComponent, selector: "custom-file-upload", inputs: { accept: "accept", placeholder: "placeholder" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: FileUploadFieldComponent,
            multi: true
        }
    ], ngImport: i0, template: "<div >\r\n\r\n  <div class=\"drop-zone\" (drop)=\"onFileDrop($event)\" (dragover)=\"onDragOver($event)\" (click)=\"fileUploadInput.click()\">\r\n    <p>Click or Drag and drop files here</p>\r\n    <p class=\"p-placeholder\">{{this.placeholder}}</p>\r\n  </div>\r\n\r\n  <input type=\"file\" (change)=\"onFileInput($event)\" #fileUploadInput class=\"file-input\"  [accept]=\"this.accept\" />\r\n\r\n\r\n  <div class=\"preview-container\">\r\n    <ng-container *ngFor=\"let file of this.formControl.value\">\r\n    <div class=\"preview\" [ngSwitch]=\"file.category\">\r\n      <ng-container  *ngSwitchCase=\"'image'\">\r\n        <img [src]=\"file.data\" alt=\"Image Preview\" />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'application'\">\r\n        <p>Application || {{file.name}} - {{file.type}}</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'audio'\">\r\n        <p>audio</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'video'\">\r\n        <p>video</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchDefault>\r\n        <div>File Preview Not Supported</div>\r\n      </ng-container>\r\n      <label>{{file?.name}}</label>\r\n      <p-button icon=\"pi pi-times\" styleClass=\"p-button-rounded p-button-danger p-button-text p-button-sm\" class=\"button\" (click)=\"removeFile(file)\"></p-button>\r\n\r\n    </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n", styles: [".drop-zone{width:100%;height:150px;border:2px dashed #ccc;text-align:center;padding:20px;cursor:pointer;border-radius:6px}.preview-container{display:flex;flex-direction:column}.preview{display:flex;align-items:center;width:100%;column-gap:20px;margin-bottom:10px;padding:12px 10px;border:1px solid #ccc;border-radius:5px;background-color:#fff;box-shadow:0 0 10px #0000001a}.preview:last-child{margin-bottom:19px}.preview p{margin-bottom:10px;text-align:center;color:#333;font-size:16px}.preview img{width:80px;height:60px}.preview-container .button{margin-left:auto}.file-input{display:none!important}.p-placeholder{color:#b3b3b3}\n"], dependencies: [{ kind: "component", type: i1.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: FileUploadFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'custom-file-upload', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: FileUploadFieldComponent,
                            multi: true
                        }
                    ], template: "<div >\r\n\r\n  <div class=\"drop-zone\" (drop)=\"onFileDrop($event)\" (dragover)=\"onDragOver($event)\" (click)=\"fileUploadInput.click()\">\r\n    <p>Click or Drag and drop files here</p>\r\n    <p class=\"p-placeholder\">{{this.placeholder}}</p>\r\n  </div>\r\n\r\n  <input type=\"file\" (change)=\"onFileInput($event)\" #fileUploadInput class=\"file-input\"  [accept]=\"this.accept\" />\r\n\r\n\r\n  <div class=\"preview-container\">\r\n    <ng-container *ngFor=\"let file of this.formControl.value\">\r\n    <div class=\"preview\" [ngSwitch]=\"file.category\">\r\n      <ng-container  *ngSwitchCase=\"'image'\">\r\n        <img [src]=\"file.data\" alt=\"Image Preview\" />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'application'\">\r\n        <p>Application || {{file.name}} - {{file.type}}</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'audio'\">\r\n        <p>audio</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'video'\">\r\n        <p>video</p>\r\n      </ng-container>\r\n      <ng-container *ngSwitchDefault>\r\n        <div>File Preview Not Supported</div>\r\n      </ng-container>\r\n      <label>{{file?.name}}</label>\r\n      <p-button icon=\"pi pi-times\" styleClass=\"p-button-rounded p-button-danger p-button-text p-button-sm\" class=\"button\" (click)=\"removeFile(file)\"></p-button>\r\n\r\n    </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n", styles: [".drop-zone{width:100%;height:150px;border:2px dashed #ccc;text-align:center;padding:20px;cursor:pointer;border-radius:6px}.preview-container{display:flex;flex-direction:column}.preview{display:flex;align-items:center;width:100%;column-gap:20px;margin-bottom:10px;padding:12px 10px;border:1px solid #ccc;border-radius:5px;background-color:#fff;box-shadow:0 0 10px #0000001a}.preview:last-child{margin-bottom:19px}.preview p{margin-bottom:10px;text-align:center;color:#333;font-size:16px}.preview img{width:80px;height:60px}.preview-container .button{margin-left:auto}.file-input{display:none!important}.p-placeholder{color:#b3b3b3}\n"] }]
        }], propDecorators: { accept: [{
                type: Input
            }], placeholder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,