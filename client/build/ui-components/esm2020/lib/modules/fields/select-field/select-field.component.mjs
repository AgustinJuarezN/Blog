import { Component, Input } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "primeng/multiselect";
import * as i4 from "primeng/dropdown";
export class SelectFieldComponent {
    constructor() {
        this.isReadOnly = false;
        this.options = [];
        this.multiSelect = false;
        this.disabled = false;
        this.showClear = false;
        this.formControl = new FormControl(null);
        this.hasValue = false;
        this._componentDestroyed$ = new Subject();
        this.onChange = (value) => { };
        this.onTouched = () => { };
    }
    ngOnInit() {
        this.formControl.valueChanges
            .pipe(takeUntil(this._componentDestroyed$))
            .subscribe((value) => {
            this.displayValue = value;
            this.hasValue = Array.isArray(value) ? !!value.length : !!value;
            this.onChange(value);
        });
    }
    ngOnDestroy() {
        this._componentDestroyed$.next();
        this._componentDestroyed$.complete();
    }
    writeValue(value) {
        if (Array.isArray(value)) {
            // MultiSelect
            const fullOptions = value.map(id => this.getFullOptionFromId(id));
            this.formControl.setValue(fullOptions);
        }
        else {
            // Select
            const fullOption = this.getFullOptionFromId(value);
            this.formControl.setValue(fullOption);
        }
    }
    registerOnChange(fn) {
        this.onChange = (value) => {
            if (Array.isArray(value)) {
                const ids = value.map(option => this.getIdFromOption(option));
                fn(ids);
            }
            else {
                const id = this.getIdFromOption(value);
                fn(id);
            }
        };
    }
    // Busco en la lista de opciones la opción cuyo ID coincide con el que proporcionamos.
    // Si no encontramos una opción que coincida, retorno null.
    getFullOptionFromId(id) {
        return this.options.find(option => option.id === id) || null;
    }
    getIdFromOption(option) {
        return option ? option.id : null;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        isDisabled ? this._disableFormControl() : this._enableFormControl();
    }
    _enableFormControl() {
        this.formControl.enable({ emitEvent: false });
    }
    _disableFormControl() {
        this.formControl.disable({ emitEvent: false });
    }
}
SelectFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: SelectFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SelectFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: SelectFieldComponent, selector: "custom-select-field", inputs: { isReadOnly: ["readonly", "isReadOnly"], inputId: "inputId", options: "options", multiSelect: "multiSelect", disabled: "disabled", showClear: "showClear", placeholder: "placeholder" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: SelectFieldComponent,
            multi: true,
        },
    ], ngImport: i0, template: "<ng-container *ngIf=\"!this.isReadOnly; else readOnlyTemplate\">\r\n  <p-multiSelect\r\n    *ngIf=\"this.multiSelect; else singleSelectTemplate\"\r\n    [options]=\"this.options\"\r\n    [formControl]=\"this.formControl\"\r\n    [defaultLabel]=\"this.placeholder || 'Seleccione una o multiples opciones'\"\r\n    dataKey=\"id\"\r\n    optionLabel=\"description\"\r\n    display=\"chip\"\r\n    [readonly]=\"this.isReadOnly\"\r\n    [inputId]=\"this.inputId\"\r\n    [disabled]=\"this.disabled\"\r\n    (onChange)=\"this.onTouched()\"\r\n    (onPanelHide)=\"this.onTouched()\"\r\n  >\r\n  </p-multiSelect>\r\n  <ng-template #singleSelectTemplate>\r\n    <p-dropdown\r\n      [options]=\"this.options\"\r\n      [formControl]=\"this.formControl\"\r\n      [showClear]=\"this.showClear\"\r\n      [placeholder]=\"this.placeholder || 'Seleccione una opci\u00F3n'\"\r\n      dataKey=\"id\"\r\n      optionLabel=\"description\"\r\n      [readonly]=\"this.isReadOnly\"\r\n      [inputId]=\"this.inputId\"\r\n      [disabled]=\"this.disabled\"\r\n      (onChange)=\"this.onTouched()\"\r\n      (onHide)=\"this.onTouched()\"\r\n    >\r\n    </p-dropdown>\r\n  </ng-template>\r\n</ng-container>\r\n\r\n<ng-template #readOnlyTemplate>\r\n  <div class=\"read-only-template\">\r\n    <ng-container *ngIf=\"this.multiSelect; else singleSelectTemplate\">\r\n      <ul\r\n        *ngIf=\"this.displayValue && this.displayValue.length; else emptyValueTemplate\"\r\n        class=\"read-only-template__list\"\r\n      >\r\n        <li\r\n          *ngFor=\"let value of displayValue\"\r\n          class=\"read-only-template__list--item\"\r\n        >\r\n          {{ value.description }}\r\n        </li>\r\n      </ul>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #singleSelectTemplate>\r\n  <span\r\n    *ngIf=\"this.displayValue; else emptyValueTemplate\"\r\n    class=\"read-only-template__value\"\r\n    >{{ this.displayValue.description }}</span\r\n  >\r\n</ng-template>\r\n\r\n<ng-template #emptyValueTemplate>\r\n  <span class=\"read-only-template__value--empty\">-</span>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }, { kind: "component", type: i4.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "overlayDirection", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: SelectFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'custom-select-field', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: SelectFieldComponent,
                            multi: true,
                        },
                    ], template: "<ng-container *ngIf=\"!this.isReadOnly; else readOnlyTemplate\">\r\n  <p-multiSelect\r\n    *ngIf=\"this.multiSelect; else singleSelectTemplate\"\r\n    [options]=\"this.options\"\r\n    [formControl]=\"this.formControl\"\r\n    [defaultLabel]=\"this.placeholder || 'Seleccione una o multiples opciones'\"\r\n    dataKey=\"id\"\r\n    optionLabel=\"description\"\r\n    display=\"chip\"\r\n    [readonly]=\"this.isReadOnly\"\r\n    [inputId]=\"this.inputId\"\r\n    [disabled]=\"this.disabled\"\r\n    (onChange)=\"this.onTouched()\"\r\n    (onPanelHide)=\"this.onTouched()\"\r\n  >\r\n  </p-multiSelect>\r\n  <ng-template #singleSelectTemplate>\r\n    <p-dropdown\r\n      [options]=\"this.options\"\r\n      [formControl]=\"this.formControl\"\r\n      [showClear]=\"this.showClear\"\r\n      [placeholder]=\"this.placeholder || 'Seleccione una opci\u00F3n'\"\r\n      dataKey=\"id\"\r\n      optionLabel=\"description\"\r\n      [readonly]=\"this.isReadOnly\"\r\n      [inputId]=\"this.inputId\"\r\n      [disabled]=\"this.disabled\"\r\n      (onChange)=\"this.onTouched()\"\r\n      (onHide)=\"this.onTouched()\"\r\n    >\r\n    </p-dropdown>\r\n  </ng-template>\r\n</ng-container>\r\n\r\n<ng-template #readOnlyTemplate>\r\n  <div class=\"read-only-template\">\r\n    <ng-container *ngIf=\"this.multiSelect; else singleSelectTemplate\">\r\n      <ul\r\n        *ngIf=\"this.displayValue && this.displayValue.length; else emptyValueTemplate\"\r\n        class=\"read-only-template__list\"\r\n      >\r\n        <li\r\n          *ngFor=\"let value of displayValue\"\r\n          class=\"read-only-template__list--item\"\r\n        >\r\n          {{ value.description }}\r\n        </li>\r\n      </ul>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #singleSelectTemplate>\r\n  <span\r\n    *ngIf=\"this.displayValue; else emptyValueTemplate\"\r\n    class=\"read-only-template__value\"\r\n    >{{ this.displayValue.description }}</span\r\n  >\r\n</ng-template>\r\n\r\n<ng-template #emptyValueTemplate>\r\n  <span class=\"read-only-template__value--empty\">-</span>\r\n</ng-template>\r\n" }]
        }], propDecorators: { isReadOnly: [{
                type: Input,
                args: ['readonly']
            }], inputId: [{
                type: Input
            }], options: [{
                type: Input
            }], multiSelect: [{
                type: Input
            }], disabled: [{
                type: Input
            }], showClear: [{
                type: Input
            }], placeholder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,