import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { Validators } from '@angular/forms';
import { DEFAULT_ERROR_TYPES, defaultFieldValues, FieldType } from '../shared';
import { BehaviorSubject, combineLatest, debounceTime, distinctUntilChanged, filter, map, Subject, tap, } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../state/form-service";
import * as i3 from "@angular/common";
import * as i4 from "../../number-field/number-field.component";
import * as i5 from "../../checkbox-field/checkbox-field.component";
import * as i6 from "../../select-field/select-field.component";
import * as i7 from "../../date-field/date-field.component";
import * as i8 from "../../text-field/text-field.component";
import * as i9 from "../../text-area-field/text-area-field.component";
import * as i10 from "../../file-upload-field/file-upload-field.component";
export var FormStatus;
(function (FormStatus) {
    FormStatus["INVALID"] = "INVALID";
    FormStatus["VALID"] = "VALID";
    FormStatus["PENDING"] = "PENDING";
})(FormStatus || (FormStatus = {}));
// DynamicFormComponent is an Angular component that creates a form based on a given structure and manages its state.
export class DynamicFormComponent {
    constructor(fb, changeDetector, formService) {
        this.fb = fb;
        this.changeDetector = changeDetector;
        this.formService = formService;
        this.formReadOnly = false;
        this.updateForm = new EventEmitter();
        this.fieldType = FieldType;
        this.defaultErrors = DEFAULT_ERROR_TYPES;
        this.formSubmitted$ = new BehaviorSubject(false);
        this.formDestroyed$ = new Subject();
        this.formInitialized = new EventEmitter();
        // Initializes the form group property and sets up listeners for form changes.
        // Context is shared by JS, thats why I have access to FormGroup instance.
        this.initializeForm = (form) => {
            this.form = form;
            this.listenFormChanges(form);
            this.listenFormStatusChanges(form);
            this.formInitialized.emit(this.form);
        };
        // Builds a FormGroup based on the provided structure and adds FormControl instances for each field.
        this.formBuilder = (structure) => {
            const formGroupConfig = structure.find(field => field.name === null);
            const groupValidators = formGroupConfig?.validators || [];
            const groupAsyncValidators = formGroupConfig?.asyncValidators || [];
            const groupUpdateOn = formGroupConfig?.updateOn;
            // Remove the FormGroup config from the structure array.
            if (formGroupConfig)
                structure = structure.filter(field => field.name !== null);
            const group = this.fb.group({}, {
                validators: groupValidators,
                asyncValidators: groupAsyncValidators,
                updateOn: groupUpdateOn
            });
            structure.forEach((field) => group.addControl(field.name, this.control(field)));
            return group;
        };
        // Creates a FormControl for the given field with its initial value, validators, and other configurations.
        this.control = (field) => {
            const value = field.type ? defaultFieldValues[field.type.toUpperCase()] : null;
            return this.fb.control({ value, disabled: field.disabled || false }, {
                validators: field.validators,
                asyncValidators: field.asyncValidators,
                updateOn: field.updateOn
            });
        };
        // Patches the form with the given data or an empty object if data is not provided.
        this.patchValue = ([form, data]) => {
            // Only patch values if the data object is different from the current form values
            if (!this.isEqual(data, form.value)) {
                form.patchValue(data || {}, { emitEvent: false });
            }
        };
    }
    ngOnInit() {
        this.watchForFormBuild();
        this.formService.resetForm$.pipe(takeUntil(this.formDestroyed$)).subscribe(() => {
            this.form?.reset();
        });
    }
    submitted() {
        this.form.markAsTouched();
        this.form.markAllAsTouched();
        this.form.updateValueAndValidity();
        this.formSubmitted$.next(true);
        this.changeDetector.detectChanges();
    }
    hasValidator(control) {
        return this.form.controls[control].hasValidator(Validators.required) || this.form.controls[control].hasValidator(Validators.requiredTrue);
    }
    // Subscribes to structure$ and then to data$ observables to build and patch the form.
    // They are also responsible for handling form patching and resetting based on structure and data.
    watchForFormBuild() {
        this.structure$
            .pipe(map(this.formBuilder), tap(this.initializeForm), (f$) => combineLatest([f$, this.data$]), takeUntil(this.formDestroyed$))
            .subscribe(this.patchValue);
    }
    // Listens for form value changes and emits the updateForm event with the changes.
    listenFormChanges(form) {
        form.valueChanges
            .pipe(debounceTime(100), distinctUntilChanged((prev, curr) => this.isEqual(prev, curr)), takeUntil(this.formDestroyed$))
            .subscribe((changes) => {
            this.updateForm.emit({
                data: changes,
                valid: this.form.valid,
                status: this.form.status
            });
        });
    }
    listenFormStatusChanges(form) {
        let prevStatus = 'INVALID';
        form.statusChanges.pipe(takeUntil(this.formDestroyed$))
            .subscribe((status => {
            if (prevStatus === 'PENDING') {
                this.updateForm.emit({
                    data: this.form.value,
                    valid: this.form.valid,
                    status
                });
            }
            prevStatus = status;
        }));
    }
    // Deep equality check for two objects.
    // FIXME: Should I add extenal library to improve performance ?
    isEqual(obj1, obj2) {
        if (obj1 === obj2)
            return true;
        if (typeof obj1 !== 'object' ||
            typeof obj2 !== 'object' ||
            obj1 === null ||
            obj2 === null)
            return false;
        const keys1 = Object.keys(obj1);
        const keys2 = Object.keys(obj2);
        if (keys1.length !== keys2.length)
            return false;
        for (const key of keys1) {
            if (!keys2.includes(key))
                return false;
            if (!this.isEqual(obj1[key], obj2[key]))
                return false;
        }
        return true;
    }
    ngOnDestroy() {
        this.formDestroyed$.next();
        this.formDestroyed$.complete();
    }
    // ------------------------------ Implementation of  ControlValueAccessor methods ------------------------------
    writeValue(value) {
        this.form.patchValue(value, { emitEvent: false });
    }
    registerOnChange(fn) {
        this.form.valueChanges.pipe(filter(() => this.form.touched), distinctUntilChanged()).subscribe(fn);
    }
    registerOnTouched(fn) {
        this.form.valueChanges.pipe(filter(() => this.form.touched), distinctUntilChanged()).subscribe(fn);
    }
    setDisabledState(isDisabled) {
        isDisabled ? this.form.disable() : this.form.enable();
    }
}
DynamicFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DynamicFormComponent, deps: [{ token: i1.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i2.FormService }], target: i0.ɵɵFactoryTarget.Component });
DynamicFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: DynamicFormComponent, selector: "dynamic-form", inputs: { structure$: "structure$", data$: "data$", formReadOnly: ["readonly", "formReadOnly"] }, outputs: { updateForm: "updateForm", formInitialized: "formInitialized" }, ngImport: i0, template: "<form [formGroup]=\"form\" class=\"form\" autocomplete=\"off\">\r\n  <div\r\n    *ngFor=\"let field of structure$ | async\"\r\n    class=\"field\"\r\n    [ngClass]=\"field.name\"\r\n    [class.read-only-form]=\"formReadOnly\"\r\n  >\r\n\r\n    <ng-container *ngIf=\"(!!field.hide ? !field.hide(this.form) : true) && field.name\">\r\n\r\n      <label\r\n         class=\"field__label\"\r\n         [for]=\"field.name\"\r\n         [class.required]=\"hasValidator(field.name)\"\r\n      >{{ field.label }}</label>\r\n\r\n      <ng-container [ngSwitch]=\"field.type\">\r\n        <!-- ------------ Number Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.NUMBER\">\r\n            <custom-number-field\r\n              [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n              [max]=\"field.number?.max!\"\r\n              [maxFractionDigits]=\"field.number?.maxFractionDigits!\"\r\n              [readonly]=\"field.readonly || formReadOnly\"\r\n              class=\"form-group__input\"\r\n              [formControlName]=\"field.name\"\r\n              [placeholder]=\"field.placeholder!\"\r\n              [inputId]=\"field.name\"\r\n            ></custom-number-field>\r\n        </ng-container>\r\n        <!-- ------------ Number Field Ends ------------ -->\r\n\r\n        <!-- ------------ Checkbox Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.CHECK\">\r\n          <custom-checkbox-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n          ></custom-checkbox-field>\r\n        </ng-container>\r\n\r\n        <!-- ------------ Date Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.DATE\">\r\n          <custom-date-field [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n                  [readonly]=\"field.readonly || formReadOnly\"\r\n                  class=\"form-group__input\"\r\n                  [formControlName]=\"field.name\"\r\n                  [inputId]=\"field.name\"\r\n                  [placeholder]=\"field.placeholder!\"\r\n          ></custom-date-field>\r\n        </ng-container>\r\n        <!-- ------------ Date Ends ------------ -->\r\n\r\n        <!-- ------------ TextArea Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.TEXTAREA\">\r\n          <custom-text-area-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched \"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-text-area-field>\r\n        </ng-container>\r\n        <!-- ------------ TextArea Ends ------------ -->\r\n\r\n        <!-- ------------ Select Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.SELECT\">\r\n          <custom-select-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\r\n            \"\r\n            [options]=\"field.select?.options ?? []\"\r\n            [showClear]=\"field.select?.showClear ?? false\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-select-field>\r\n        </ng-container>\r\n        <!-- ------------ Select Field Ends ------------ -->\r\n\r\n        <!-- ------------ Multi Select Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.MULTI_SELECT\">\r\n          <custom-select-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [options]=\"field.select?.options ?? []\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [multiSelect]=\"true\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-select-field>\r\n        </ng-container>\r\n        <!-- ------------ Multi Select Field Ends ------------ -->\r\n\r\n        <!-- ------------ File Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.FILE_UPLOAD\">\r\n          <custom-file-upload\r\n                  [class.error]=\"\r\n                      this.form.controls[field.name].invalid &&\r\n                      this.form.controls[field.name].touched\"\r\n                  class=\"form-group__input\"\r\n                  [formControlName]=\"field.name\"\r\n                  [accept]=\"field.file?.accept!\"\r\n                  [placeholder]=\"field.placeholder!\"\r\n          ></custom-file-upload>\r\n        </ng-container>\r\n        <!-- ------------ File Field Ends ------------ -->\r\n\r\n        <!-- -------------- Edge Case Starts -------------- -->\r\n        <!-- This is for passing id as form value if needed -->\r\n        <ng-container *ngSwitchCase=\"fieldType.INVISIBLE\"></ng-container>\r\n        <!-- --------------- Edge Case Ends --------------- -->\r\n\r\n        <!-- -------------- Default Case Starts (Classic input) -------------- -->\r\n        <ng-container *ngSwitchDefault>\r\n          <custom-text-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\r\n            \"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [placeholder]=\"field.placeholder || ''\"\r\n            [icon]=\"field.attrs?.icon \"\r\n            [iconPosition]=\"field.attrs?.iconPosition \"\r\n            [type]=\"field.attrs?.type\"\r\n            [inputId]=\"field.name\"\r\n            [loading$]=\"this.form.controls[field.name].statusChanges\"\r\n          ></custom-text-field>\r\n<!--          <pre>{{this.form.controls[field.name].errors | json}}</pre>-->\r\n        </ng-container>\r\n        <!-- -------------- Default Case Ends (Classic input) -------------- -->\r\n\r\n\r\n\r\n        <!-- -------------- FormControl (Field) Error Starts -------------- -->\r\n        <ng-container *ngFor=\"let error of (field.errors ?? []).concat(this.defaultErrors)\">\r\n          <ng-container *ngIf=\"this.form.controls[field.name].hasError(error.type) &&  !field.readonly && !formReadOnly\">\r\n          <!-- Common error -->\r\n          <small class=\"error-message\" *ngIf=\"!error?.showOnSubmit\">{{ field.label }} {{ error.message }}</small>\r\n\r\n          <!-- Error showed on submit-->\r\n          <small class=\"error-message\" *ngIf=\"error?.showOnSubmit && (this.formSubmitted$ | async)\">{{ field.label }} {{ error.message }}</small>\r\n\r\n            <!-- Error for maxlength -->\r\n<!--            <small class=\"error-message\"-->\r\n<!--                   *ngIf=\"!error?.showOnSubmit && error.type === 'maxlength' && form.controls[field.name]?.errors?.['maxlength']\"-->\r\n<!--            >-->\r\n<!--              The maximum value allowed is {{ form.controls[field.name].errors?.['maxlength']?.['requiredLength'] }}. However, the actual value provided is {{ form.controls[field.name].errors?.['maxlength']?.['actualLength'] }}. Please provide a value less than or equal to the maximum allowed value.-->\r\n<!--            </small>-->\r\n          </ng-container>\r\n        </ng-container>\r\n        <!-- -------------- FormControl (Field) Error Ends -------------- -->\r\n\r\n\r\n        <!-- FormControl (Field) \".groupErrors[]\" Starts -->\r\n        <ng-container *ngIf=\"field.groupErrors\">\r\n          <ng-container *ngFor=\"let groupError of field.groupErrors\">\r\n            <small\r\n              class=\"group-error-message\"\r\n              *ngIf=\"\r\n            form.invalid &&\r\n            form.hasError(groupError.type) &&\r\n            form.controls[field.name].touched &&\r\n            !form.controls[field.name].errors &&\r\n            !groupError?.showOnSubmit &&\r\n            (formSubmitted$ | async)\r\n          \"\r\n            >\r\n              {{ groupError.message }}\r\n            </small>\r\n          </ng-container>\r\n        </ng-container>\r\n        <!-- FormControl (Field) \".groupErrors[]\" Ends -->\r\n\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n\r\n\r\n<!--    FIXME : I should write css to hide this error if there is a field related error being showed-->\r\n  <!-- Errors associated to FormGroup Starts -->\r\n<!--  <div class=\"form-group-errors\" *ngIf=\"form.invalid && form.errors\">-->\r\n<!--    <ng-container *ngFor=\"let field of structure$ | async\">-->\r\n<!--      <ng-container *ngIf=\"!field.name && field.errors\">-->\r\n<!--        <ng-container *ngFor=\"let error of field.errors\">-->\r\n<!--          <small class=\"error-message\" *ngIf=\"form.hasError(error.type)\">-->\r\n<!--              {{ error.message }}-->\r\n<!--          </small>-->\r\n<!--        </ng-container>-->\r\n<!--      </ng-container>-->\r\n<!--    </ng-container>-->\r\n<!--  </div>-->\r\n  <!-- Errors associated to FormGroup ends -->\r\n\r\n</form>\r\n", styles: [".read-only-form{margin-top:12px;margin-bottom:12px}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i4.NumberFieldComponent, selector: "custom-number-field", inputs: ["placeholder", "minFractionDigits", "maxFractionDigits", "min", "max", "maxLength", "locale", "prefix", "suffix", "disabled", "useGrouping", "inputId", "readonly"] }, { kind: "component", type: i5.CheckboxFieldComponent, selector: "custom-checkbox-field", inputs: ["readonly", "inputId", "label", "disabled"] }, { kind: "component", type: i6.SelectFieldComponent, selector: "custom-select-field", inputs: ["readonly", "inputId", "options", "multiSelect", "disabled", "showClear", "placeholder"] }, { kind: "component", type: i7.DateFieldComponent, selector: "custom-date-field", inputs: ["readonly", "inputId", "disabled", "showIcon", "min", "max", "format", "view", "placeholder"] }, { kind: "component", type: i8.TextFieldComponent, selector: "custom-text-field", inputs: ["placeholder", "inputId", "readonly", "disabled", "iconPosition", "type", "icon", "loading$"] }, { kind: "component", type: i9.TextAreaFieldComponent, selector: "custom-text-area-field", inputs: ["readonly", "placeholder", "inputId"] }, { kind: "component", type: i10.FileUploadFieldComponent, selector: "custom-file-upload", inputs: ["accept", "placeholder"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DynamicFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<form [formGroup]=\"form\" class=\"form\" autocomplete=\"off\">\r\n  <div\r\n    *ngFor=\"let field of structure$ | async\"\r\n    class=\"field\"\r\n    [ngClass]=\"field.name\"\r\n    [class.read-only-form]=\"formReadOnly\"\r\n  >\r\n\r\n    <ng-container *ngIf=\"(!!field.hide ? !field.hide(this.form) : true) && field.name\">\r\n\r\n      <label\r\n         class=\"field__label\"\r\n         [for]=\"field.name\"\r\n         [class.required]=\"hasValidator(field.name)\"\r\n      >{{ field.label }}</label>\r\n\r\n      <ng-container [ngSwitch]=\"field.type\">\r\n        <!-- ------------ Number Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.NUMBER\">\r\n            <custom-number-field\r\n              [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n              [max]=\"field.number?.max!\"\r\n              [maxFractionDigits]=\"field.number?.maxFractionDigits!\"\r\n              [readonly]=\"field.readonly || formReadOnly\"\r\n              class=\"form-group__input\"\r\n              [formControlName]=\"field.name\"\r\n              [placeholder]=\"field.placeholder!\"\r\n              [inputId]=\"field.name\"\r\n            ></custom-number-field>\r\n        </ng-container>\r\n        <!-- ------------ Number Field Ends ------------ -->\r\n\r\n        <!-- ------------ Checkbox Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.CHECK\">\r\n          <custom-checkbox-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n          ></custom-checkbox-field>\r\n        </ng-container>\r\n\r\n        <!-- ------------ Date Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.DATE\">\r\n          <custom-date-field [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n                  [readonly]=\"field.readonly || formReadOnly\"\r\n                  class=\"form-group__input\"\r\n                  [formControlName]=\"field.name\"\r\n                  [inputId]=\"field.name\"\r\n                  [placeholder]=\"field.placeholder!\"\r\n          ></custom-date-field>\r\n        </ng-container>\r\n        <!-- ------------ Date Ends ------------ -->\r\n\r\n        <!-- ------------ TextArea Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.TEXTAREA\">\r\n          <custom-text-area-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched \"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-text-area-field>\r\n        </ng-container>\r\n        <!-- ------------ TextArea Ends ------------ -->\r\n\r\n        <!-- ------------ Select Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.SELECT\">\r\n          <custom-select-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\r\n            \"\r\n            [options]=\"field.select?.options ?? []\"\r\n            [showClear]=\"field.select?.showClear ?? false\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-select-field>\r\n        </ng-container>\r\n        <!-- ------------ Select Field Ends ------------ -->\r\n\r\n        <!-- ------------ Multi Select Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.MULTI_SELECT\">\r\n          <custom-select-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [options]=\"field.select?.options ?? []\"\r\n            [formControlName]=\"field.name\"\r\n            [inputId]=\"field.name\"\r\n            [multiSelect]=\"true\"\r\n            [placeholder]=\"field.placeholder!\"\r\n          ></custom-select-field>\r\n        </ng-container>\r\n        <!-- ------------ Multi Select Field Ends ------------ -->\r\n\r\n        <!-- ------------ File Field Starts ------------ -->\r\n        <ng-container *ngSwitchCase=\"fieldType.FILE_UPLOAD\">\r\n          <custom-file-upload\r\n                  [class.error]=\"\r\n                      this.form.controls[field.name].invalid &&\r\n                      this.form.controls[field.name].touched\"\r\n                  class=\"form-group__input\"\r\n                  [formControlName]=\"field.name\"\r\n                  [accept]=\"field.file?.accept!\"\r\n                  [placeholder]=\"field.placeholder!\"\r\n          ></custom-file-upload>\r\n        </ng-container>\r\n        <!-- ------------ File Field Ends ------------ -->\r\n\r\n        <!-- -------------- Edge Case Starts -------------- -->\r\n        <!-- This is for passing id as form value if needed -->\r\n        <ng-container *ngSwitchCase=\"fieldType.INVISIBLE\"></ng-container>\r\n        <!-- --------------- Edge Case Ends --------------- -->\r\n\r\n        <!-- -------------- Default Case Starts (Classic input) -------------- -->\r\n        <ng-container *ngSwitchDefault>\r\n          <custom-text-field\r\n            [class.error]=\"\r\n              this.form.controls[field.name].invalid &&\r\n              this.form.controls[field.name].touched\r\n            \"\r\n            [readonly]=\"field.readonly || formReadOnly\"\r\n            class=\"form-group__input\"\r\n            [formControlName]=\"field.name\"\r\n            [placeholder]=\"field.placeholder || ''\"\r\n            [icon]=\"field.attrs?.icon \"\r\n            [iconPosition]=\"field.attrs?.iconPosition \"\r\n            [type]=\"field.attrs?.type\"\r\n            [inputId]=\"field.name\"\r\n            [loading$]=\"this.form.controls[field.name].statusChanges\"\r\n          ></custom-text-field>\r\n<!--          <pre>{{this.form.controls[field.name].errors | json}}</pre>-->\r\n        </ng-container>\r\n        <!-- -------------- Default Case Ends (Classic input) -------------- -->\r\n\r\n\r\n\r\n        <!-- -------------- FormControl (Field) Error Starts -------------- -->\r\n        <ng-container *ngFor=\"let error of (field.errors ?? []).concat(this.defaultErrors)\">\r\n          <ng-container *ngIf=\"this.form.controls[field.name].hasError(error.type) &&  !field.readonly && !formReadOnly\">\r\n          <!-- Common error -->\r\n          <small class=\"error-message\" *ngIf=\"!error?.showOnSubmit\">{{ field.label }} {{ error.message }}</small>\r\n\r\n          <!-- Error showed on submit-->\r\n          <small class=\"error-message\" *ngIf=\"error?.showOnSubmit && (this.formSubmitted$ | async)\">{{ field.label }} {{ error.message }}</small>\r\n\r\n            <!-- Error for maxlength -->\r\n<!--            <small class=\"error-message\"-->\r\n<!--                   *ngIf=\"!error?.showOnSubmit && error.type === 'maxlength' && form.controls[field.name]?.errors?.['maxlength']\"-->\r\n<!--            >-->\r\n<!--              The maximum value allowed is {{ form.controls[field.name].errors?.['maxlength']?.['requiredLength'] }}. However, the actual value provided is {{ form.controls[field.name].errors?.['maxlength']?.['actualLength'] }}. Please provide a value less than or equal to the maximum allowed value.-->\r\n<!--            </small>-->\r\n          </ng-container>\r\n        </ng-container>\r\n        <!-- -------------- FormControl (Field) Error Ends -------------- -->\r\n\r\n\r\n        <!-- FormControl (Field) \".groupErrors[]\" Starts -->\r\n        <ng-container *ngIf=\"field.groupErrors\">\r\n          <ng-container *ngFor=\"let groupError of field.groupErrors\">\r\n            <small\r\n              class=\"group-error-message\"\r\n              *ngIf=\"\r\n            form.invalid &&\r\n            form.hasError(groupError.type) &&\r\n            form.controls[field.name].touched &&\r\n            !form.controls[field.name].errors &&\r\n            !groupError?.showOnSubmit &&\r\n            (formSubmitted$ | async)\r\n          \"\r\n            >\r\n              {{ groupError.message }}\r\n            </small>\r\n          </ng-container>\r\n        </ng-container>\r\n        <!-- FormControl (Field) \".groupErrors[]\" Ends -->\r\n\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n\r\n\r\n<!--    FIXME : I should write css to hide this error if there is a field related error being showed-->\r\n  <!-- Errors associated to FormGroup Starts -->\r\n<!--  <div class=\"form-group-errors\" *ngIf=\"form.invalid && form.errors\">-->\r\n<!--    <ng-container *ngFor=\"let field of structure$ | async\">-->\r\n<!--      <ng-container *ngIf=\"!field.name && field.errors\">-->\r\n<!--        <ng-container *ngFor=\"let error of field.errors\">-->\r\n<!--          <small class=\"error-message\" *ngIf=\"form.hasError(error.type)\">-->\r\n<!--              {{ error.message }}-->\r\n<!--          </small>-->\r\n<!--        </ng-container>-->\r\n<!--      </ng-container>-->\r\n<!--    </ng-container>-->\r\n<!--  </div>-->\r\n  <!-- Errors associated to FormGroup ends -->\r\n\r\n</form>\r\n", styles: [".read-only-form{margin-top:12px;margin-bottom:12px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i2.FormService }]; }, propDecorators: { structure$: [{
                type: Input
            }], data$: [{
                type: Input
            }], formReadOnly: [{
                type: Input,
                args: ['readonly']
            }], updateForm: [{
                type: Output
            }], formInitialized: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWNvbXBvbmVudHMvc3JjL2xpYi9tb2R1bGVzL2ZpZWxkcy9mb3JtL2R5bmFtaWMtZm9ybS9keW5hbWljLWZvcm0uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWktY29tcG9uZW50cy9zcmMvbGliL21vZHVsZXMvZmllbGRzL2Zvcm0vZHluYW1pYy1mb3JtL2R5bmFtaWMtZm9ybS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQTRELFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JHLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBUyxTQUFTLEVBQTBCLE1BQU0sV0FBVyxDQUFDO0FBQzdHLE9BQU8sRUFDTCxlQUFlLEVBQ2YsYUFBYSxFQUNiLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFFSCxPQUFPLEVBQ1AsR0FBRyxHQUNKLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7QUFHekMsTUFBTSxDQUFOLElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNwQixpQ0FBbUIsQ0FBQTtJQUNuQiw2QkFBZSxDQUFBO0lBQ2YsaUNBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUpXLFVBQVUsS0FBVixVQUFVLFFBSXJCO0FBR0QscUhBQXFIO0FBT3JILE1BQU0sT0FBTyxvQkFBb0I7SUFnQi9CLFlBQTZCLEVBQWUsRUFBVSxjQUFpQyxFQUFVLFdBQXlCO1FB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TUFBTTtnQkFTRyxlQUFlO3NCQUF4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIElucHV0LFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgT3V0cHV0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NvbnRyb2xWYWx1ZUFjY2Vzc29yLCBGb3JtQnVpbGRlciwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0RFRkFVTFRfRVJST1JfVFlQRVMsIGRlZmF1bHRGaWVsZFZhbHVlcywgRmllbGQsIEZpZWxkVHlwZSwgRm9ybVN0YXRlLCBJRHluYW1pY0Zvcm19IGZyb20gJy4uL3NoYXJlZCc7XHJcbmltcG9ydCB7XHJcbiAgQmVoYXZpb3JTdWJqZWN0LFxyXG4gIGNvbWJpbmVMYXRlc3QsXHJcbiAgZGVib3VuY2VUaW1lLFxyXG4gIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxyXG4gIGZpbHRlcixcclxuICBtYXAsXHJcbiAgT2JzZXJ2YWJsZSxcclxuICBTdWJqZWN0LFxyXG4gIHRhcCxcclxufSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtGb3JtU2VydmljZX0gZnJvbSBcIi4uL3N0YXRlL2Zvcm0tc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGVudW0gRm9ybVN0YXR1c3tcclxuICBJTlZBTElEID0gJ0lOVkFMSUQnLFxyXG4gIFZBTElEID0gJ1ZBTElEJyxcclxuICBQRU5ESU5HID0gJ1BFTkRJTkcnXHJcbn1cclxuXHJcblxyXG4vLyBEeW5hbWljRm9ybUNvbXBvbmVudCBpcyBhbiBBbmd1bGFyIGNvbXBvbmVudCB0aGF0IGNyZWF0ZXMgYSBmb3JtIGJhc2VkIG9uIGEgZ2l2ZW4gc3RydWN0dXJlIGFuZCBtYW5hZ2VzIGl0cyBzdGF0ZS5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWZvcm0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9keW5hbWljLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2R5bmFtaWMtZm9ybS5jb21wb25lbnQuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db21wb25lbnQgaW1wbGVtZW50cyBJRHluYW1pY0Zvcm0sIE9uSW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcbiAgQElucHV0KCkgc3RydWN0dXJlJCE6IE9ic2VydmFibGU8RmllbGRbXT47XHJcbiAgQElucHV0KCkgZGF0YSQhOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgQElucHV0KCdyZWFkb25seScpIGZvcm1SZWFkT25seSA9IGZhbHNlO1xyXG5cclxuICBAT3V0cHV0KCkgdXBkYXRlRm9ybSA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybVN0YXRlPigpO1xyXG5cclxuICBmaWVsZFR5cGUgPSBGaWVsZFR5cGU7XHJcbiAgZGVmYXVsdEVycm9ycyA9IERFRkFVTFRfRVJST1JfVFlQRVM7XHJcbiAgXHJcbiAgZm9ybSE6IEZvcm1Hcm91cDtcclxuICBmb3JtU3VibWl0dGVkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGZvcm1EZXN0cm95ZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcbiAgQE91dHB1dCgpIGZvcm1Jbml0aWFsaXplZCA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybUdyb3VwPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZiOiBGb3JtQnVpbGRlciwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgZm9ybVNlcnZpY2UgOiBGb3JtU2VydmljZSApIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy53YXRjaEZvckZvcm1CdWlsZCgpO1xyXG4gIFxyXG4gICAgdGhpcy5mb3JtU2VydmljZS5yZXNldEZvcm0kLnBpcGUodGFrZVVudGlsKHRoaXMuZm9ybURlc3Ryb3llZCQpKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmZvcm0/LnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN1Ym1pdHRlZCgpIHtcclxuICAgIHRoaXMuZm9ybS5tYXJrQXNUb3VjaGVkKCk7XHJcbiAgICB0aGlzLmZvcm0ubWFya0FsbEFzVG91Y2hlZCgpO1xyXG4gICAgdGhpcy5mb3JtLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIHRoaXMuZm9ybVN1Ym1pdHRlZCQubmV4dCh0cnVlKTtcclxuXHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcclxuICB9XHJcbiAgXHJcbiAgaGFzVmFsaWRhdG9yKGNvbnRyb2wgOiBzdHJpbmcpIDogYm9vbGVhbntcclxuICAgIHJldHVybiB0aGlzLmZvcm0uY29udHJvbHNbY29udHJvbF0uaGFzVmFsaWRhdG9yKFZhbGlkYXRvcnMucmVxdWlyZWQpIHx8IHRoaXMuZm9ybS5jb250cm9sc1tjb250cm9sXS5oYXNWYWxpZGF0b3IoVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUpXHJcbiAgfVxyXG4gIFxyXG4gIC8vIFN1YnNjcmliZXMgdG8gc3RydWN0dXJlJCBhbmQgdGhlbiB0byBkYXRhJCBvYnNlcnZhYmxlcyB0byBidWlsZCBhbmQgcGF0Y2ggdGhlIGZvcm0uXHJcbiAgLy8gVGhleSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgZm9ybSBwYXRjaGluZyBhbmQgcmVzZXR0aW5nIGJhc2VkIG9uIHN0cnVjdHVyZSBhbmQgZGF0YS5cclxuICBwcml2YXRlIHdhdGNoRm9yRm9ybUJ1aWxkKCl7XHJcbiAgICB0aGlzLnN0cnVjdHVyZSRcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWFwKHRoaXMuZm9ybUJ1aWxkZXIpLFxyXG4gICAgICAgIHRhcCh0aGlzLmluaXRpYWxpemVGb3JtKSxcclxuICAgICAgICAoZiQpID0+IGNvbWJpbmVMYXRlc3QoW2YkLCB0aGlzLmRhdGEkXSksXHJcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZm9ybURlc3Ryb3llZCQpXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSh0aGlzLnBhdGNoVmFsdWUpO1xyXG4gICAgXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG5cclxuICAvLyBJbml0aWFsaXplcyB0aGUgZm9ybSBncm91cCBwcm9wZXJ0eSBhbmQgc2V0cyB1cCBsaXN0ZW5lcnMgZm9yIGZvcm0gY2hhbmdlcy5cclxuICAvLyBDb250ZXh0IGlzIHNoYXJlZCBieSBKUywgdGhhdHMgd2h5IEkgaGF2ZSBhY2Nlc3MgdG8gRm9ybUdyb3VwIGluc3RhbmNlLlxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUZvcm0gPSAoZm9ybTogRm9ybUdyb3VwKSA9PiB7XHJcbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xyXG4gICAgdGhpcy5saXN0ZW5Gb3JtQ2hhbmdlcyhmb3JtKTtcclxuICAgIHRoaXMubGlzdGVuRm9ybVN0YXR1c0NoYW5nZXMoZm9ybSk7XHJcbiAgICB0aGlzLmZvcm1Jbml0aWFsaXplZC5lbWl0KHRoaXMuZm9ybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIEJ1aWxkcyBhIEZvcm1Hcm91cCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgc3RydWN0dXJlIGFuZCBhZGRzIEZvcm1Db250cm9sIGluc3RhbmNlcyBmb3IgZWFjaCBmaWVsZC5cclxuICBwcml2YXRlIGZvcm1CdWlsZGVyID0gKHN0cnVjdHVyZTogRmllbGRbXSk6IEZvcm1Hcm91cCA9PiB7XHJcbiAgICBjb25zdCBmb3JtR3JvdXBDb25maWcgPSBzdHJ1Y3R1cmUuZmluZChmaWVsZCA9PiBmaWVsZC5uYW1lID09PSBudWxsKTtcclxuICAgIGNvbnN0IGdyb3VwVmFsaWRhdG9ycyA9IGZvcm1Hcm91cENvbmZpZz8udmFsaWRhdG9ycyB8fCBbXTtcclxuICAgIGNvbnN0IGdyb3VwQXN5bmNWYWxpZGF0b3JzID0gZm9ybUdyb3VwQ29uZmlnPy5hc3luY1ZhbGlkYXRvcnMgfHwgW107XHJcbiAgICBjb25zdCBncm91cFVwZGF0ZU9uID0gZm9ybUdyb3VwQ29uZmlnPy51cGRhdGVPblxyXG5cclxuXHJcbiAgICAvLyBSZW1vdmUgdGhlIEZvcm1Hcm91cCBjb25maWcgZnJvbSB0aGUgc3RydWN0dXJlIGFycmF5LlxyXG4gICAgaWYgKGZvcm1Hcm91cENvbmZpZykgc3RydWN0dXJlID0gc3RydWN0dXJlLmZpbHRlcihmaWVsZCA9PiBmaWVsZC5uYW1lICE9PSBudWxsKTtcclxuXHJcblxyXG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLmZiLmdyb3VwKFxyXG4gICAgICB7fSxcclxuICAgICAge1xyXG4gICAgICAgIHZhbGlkYXRvcnM6IGdyb3VwVmFsaWRhdG9ycyxcclxuICAgICAgICBhc3luY1ZhbGlkYXRvcnM6IGdyb3VwQXN5bmNWYWxpZGF0b3JzLFxyXG4gICAgICAgIHVwZGF0ZU9uIDogZ3JvdXBVcGRhdGVPblxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHN0cnVjdHVyZS5mb3JFYWNoKChmaWVsZCkgPT5cclxuICAgICAgZ3JvdXAuYWRkQ29udHJvbChmaWVsZC5uYW1lISwgdGhpcy5jb250cm9sKGZpZWxkKSlcclxuICAgICk7XHJcblxyXG5cclxuICAgIHJldHVybiBncm91cDtcclxuICB9O1xyXG5cclxuICAvLyBDcmVhdGVzIGEgRm9ybUNvbnRyb2wgZm9yIHRoZSBnaXZlbiBmaWVsZCB3aXRoIGl0cyBpbml0aWFsIHZhbHVlLCB2YWxpZGF0b3JzLCBhbmQgb3RoZXIgY29uZmlndXJhdGlvbnMuXHJcbiAgcHJpdmF0ZSBjb250cm9sID0gKGZpZWxkOiBGaWVsZCk6IEZvcm1Db250cm9sID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gZmllbGQudHlwZSA/IGRlZmF1bHRGaWVsZFZhbHVlc1tmaWVsZC50eXBlLnRvVXBwZXJDYXNlKCkgYXMga2V5b2YgdHlwZW9mIEZpZWxkVHlwZV0gOiBudWxsO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy5mYi5jb250cm9sKHsgdmFsdWUsIGRpc2FibGVkOiBmaWVsZC5kaXNhYmxlZCB8fCBmYWxzZSB9LCB7XHJcbiAgICAgIHZhbGlkYXRvcnM6IGZpZWxkLnZhbGlkYXRvcnMsXHJcbiAgICAgIGFzeW5jVmFsaWRhdG9yczogZmllbGQuYXN5bmNWYWxpZGF0b3JzLFxyXG4gICAgICB1cGRhdGVPbjogZmllbGQudXBkYXRlT25cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIFBhdGNoZXMgdGhlIGZvcm0gd2l0aCB0aGUgZ2l2ZW4gZGF0YSBvciBhbiBlbXB0eSBvYmplY3QgaWYgZGF0YSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgcHJpdmF0ZSBwYXRjaFZhbHVlID0gKFtmb3JtLCBkYXRhXTogW0Zvcm1Hcm91cCwgYW55XSkgPT4ge1xyXG4gICAgLy8gT25seSBwYXRjaCB2YWx1ZXMgaWYgdGhlIGRhdGEgb2JqZWN0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBjdXJyZW50IGZvcm0gdmFsdWVzXHJcbiAgICBpZiAoIXRoaXMuaXNFcXVhbChkYXRhLCBmb3JtLnZhbHVlKSkge1xyXG4gICAgICBmb3JtLnBhdGNoVmFsdWUoZGF0YSB8fCB7fSwgeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIExpc3RlbnMgZm9yIGZvcm0gdmFsdWUgY2hhbmdlcyBhbmQgZW1pdHMgdGhlIHVwZGF0ZUZvcm0gZXZlbnQgd2l0aCB0aGUgY2hhbmdlcy5cclxuICBwcml2YXRlIGxpc3RlbkZvcm1DaGFuZ2VzKGZvcm06IEZvcm1Hcm91cCkge1xyXG4gICAgZm9ybS52YWx1ZUNoYW5nZXNcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDEwMCksXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKHByZXYsIGN1cnIpID0+IHRoaXMuaXNFcXVhbChwcmV2LCBjdXJyKSksXHJcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZm9ybURlc3Ryb3llZCQpXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSgoY2hhbmdlcykgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlRm9ybS5lbWl0KHtcclxuICAgICAgICAgIGRhdGEgOiBjaGFuZ2VzLFxyXG4gICAgICAgICAgdmFsaWQgOiB0aGlzLmZvcm0udmFsaWQsXHJcbiAgICAgICAgICBzdGF0dXMgOiB0aGlzLmZvcm0uc3RhdHVzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsaXN0ZW5Gb3JtU3RhdHVzQ2hhbmdlcyhmb3JtOiBGb3JtR3JvdXApIHtcclxuICAgIGxldCBwcmV2U3RhdHVzID0gJ0lOVkFMSUQnXHJcbiAgICBmb3JtLnN0YXR1c0NoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5mb3JtRGVzdHJveWVkJCkpXHJcbiAgICAgIC5zdWJzY3JpYmUoKHN0YXR1cyA9PiB7XHJcbiAgICAgICAgaWYocHJldlN0YXR1cyA9PT0gJ1BFTkRJTkcnKXtcclxuICAgICAgICAgIHRoaXMudXBkYXRlRm9ybS5lbWl0KHtcclxuICAgICAgICAgICAgZGF0YSA6IHRoaXMuZm9ybS52YWx1ZSxcclxuICAgICAgICAgICAgdmFsaWQgOiB0aGlzLmZvcm0udmFsaWQsXHJcbiAgICAgICAgICAgIHN0YXR1c1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByZXZTdGF0dXMgPSBzdGF0dXM7XHJcblxyXG4gICAgICB9KSlcclxuICB9XHJcblxyXG4gIC8vIERlZXAgZXF1YWxpdHkgY2hlY2sgZm9yIHR3byBvYmplY3RzLlxyXG4gIC8vIEZJWE1FOiBTaG91bGQgSSBhZGQgZXh0ZW5hbCBsaWJyYXJ5IHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgP1xyXG4gIHByaXZhdGUgaXNFcXVhbChvYmoxOiBhbnksIG9iajI6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKG9iajEgPT09IG9iajIpIHJldHVybiB0cnVlO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIG9iajEgIT09ICdvYmplY3QnIHx8XHJcbiAgICAgIHR5cGVvZiBvYmoyICE9PSAnb2JqZWN0JyB8fFxyXG4gICAgICBvYmoxID09PSBudWxsIHx8XHJcbiAgICAgIG9iajIgPT09IG51bGxcclxuICAgIClcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSk7XHJcbiAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG5cclxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMxKSB7XHJcbiAgICAgIGlmICgha2V5czIuaW5jbHVkZXMoa2V5KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoIXRoaXMuaXNFcXVhbChvYmoxW2tleV0sIG9iajJba2V5XSkpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgXHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5mb3JtRGVzdHJveWVkJC5uZXh0KCk7XHJcbiAgICB0aGlzLmZvcm1EZXN0cm95ZWQkLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW1wbGVtZW50YXRpb24gb2YgIENvbnRyb2xWYWx1ZUFjY2Vzc29yIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh2YWx1ZSwgeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xyXG4gIH1cclxuICBcclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5mb3JtLnZhbHVlQ2hhbmdlcy5waXBlKFxyXG4gICAgICBmaWx0ZXIoKCkgPT4gdGhpcy5mb3JtLnRvdWNoZWQpLFxyXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKS5zdWJzY3JpYmUoZm4pO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMucGlwZShmaWx0ZXIoKCkgPT4gdGhpcy5mb3JtLnRvdWNoZWQpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKS5zdWJzY3JpYmUoZm4pO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpc0Rpc2FibGVkID8gdGhpcy5mb3JtLmRpc2FibGUoKSA6IHRoaXMuZm9ybS5lbmFibGUoKTtcclxuICB9XHJcbiAgXHJcbn1cclxuIiwiPGZvcm0gW2Zvcm1Hcm91cF09XCJmb3JtXCIgY2xhc3M9XCJmb3JtXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+XHJcbiAgPGRpdlxyXG4gICAgKm5nRm9yPVwibGV0IGZpZWxkIG9mIHN0cnVjdHVyZSQgfCBhc3luY1wiXHJcbiAgICBjbGFzcz1cImZpZWxkXCJcclxuICAgIFtuZ0NsYXNzXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgW2NsYXNzLnJlYWQtb25seS1mb3JtXT1cImZvcm1SZWFkT25seVwiXHJcbiAgPlxyXG5cclxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIoISFmaWVsZC5oaWRlID8gIWZpZWxkLmhpZGUodGhpcy5mb3JtKSA6IHRydWUpICYmIGZpZWxkLm5hbWVcIj5cclxuXHJcbiAgICAgIDxsYWJlbFxyXG4gICAgICAgICBjbGFzcz1cImZpZWxkX19sYWJlbFwiXHJcbiAgICAgICAgIFtmb3JdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgIFtjbGFzcy5yZXF1aXJlZF09XCJoYXNWYWxpZGF0b3IoZmllbGQubmFtZSlcIlxyXG4gICAgICA+e3sgZmllbGQubGFiZWwgfX08L2xhYmVsPlxyXG5cclxuICAgICAgPG5nLWNvbnRhaW5lciBbbmdTd2l0Y2hdPVwiZmllbGQudHlwZVwiPlxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIE51bWJlciBGaWVsZCBTdGFydHMgLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cImZpZWxkVHlwZS5OVU1CRVJcIj5cclxuICAgICAgICAgICAgPGN1c3RvbS1udW1iZXItZmllbGRcclxuICAgICAgICAgICAgICBbY2xhc3MuZXJyb3JdPVwiXHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0udG91Y2hlZFwiXHJcbiAgICAgICAgICAgICAgW21heF09XCJmaWVsZC5udW1iZXI/Lm1heCFcIlxyXG4gICAgICAgICAgICAgIFttYXhGcmFjdGlvbkRpZ2l0c109XCJmaWVsZC5udW1iZXI/Lm1heEZyYWN0aW9uRGlnaXRzIVwiXHJcbiAgICAgICAgICAgICAgW3JlYWRvbmx5XT1cImZpZWxkLnJlYWRvbmx5IHx8IGZvcm1SZWFkT25seVwiXHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWdyb3VwX19pbnB1dFwiXHJcbiAgICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5uYW1lXCJcclxuICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmllbGQucGxhY2Vob2xkZXIhXCJcclxuICAgICAgICAgICAgICBbaW5wdXRJZF09XCJmaWVsZC5uYW1lXCJcclxuICAgICAgICAgICAgPjwvY3VzdG9tLW51bWJlci1maWVsZD5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8IS0tIC0tLS0tLS0tLS0tLSBOdW1iZXIgRmllbGQgRW5kcyAtLS0tLS0tLS0tLS0gLS0+XHJcblxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIENoZWNrYm94IEZpZWxkIFN0YXJ0cyAtLS0tLS0tLS0tLS0gLS0+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiZmllbGRUeXBlLkNIRUNLXCI+XHJcbiAgICAgICAgICA8Y3VzdG9tLWNoZWNrYm94LWZpZWxkXHJcbiAgICAgICAgICAgIFtjbGFzcy5lcnJvcl09XCJcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS50b3VjaGVkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cImZpZWxkLnJlYWRvbmx5IHx8IGZvcm1SZWFkT25seVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1ncm91cF9faW5wdXRcIlxyXG4gICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgICAgICAgICBbaW5wdXRJZF09XCJmaWVsZC5uYW1lXCJcclxuICAgICAgICAgID48L2N1c3RvbS1jaGVja2JveC1maWVsZD5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0gRGF0ZSBGaWVsZCBTdGFydHMgLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cImZpZWxkVHlwZS5EQVRFXCI+XHJcbiAgICAgICAgICA8Y3VzdG9tLWRhdGUtZmllbGQgW2NsYXNzLmVycm9yXT1cIlxyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS5pbnZhbGlkICYmXHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLnRvdWNoZWRcIlxyXG4gICAgICAgICAgICAgICAgICBbcmVhZG9ubHldPVwiZmllbGQucmVhZG9ubHkgfHwgZm9ybVJlYWRPbmx5XCJcclxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWdyb3VwX19pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgIFtpbnB1dElkXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmllbGQucGxhY2Vob2xkZXIhXCJcclxuICAgICAgICAgID48L2N1c3RvbS1kYXRlLWZpZWxkPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIERhdGUgRW5kcyAtLS0tLS0tLS0tLS0gLS0+XHJcblxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIFRleHRBcmVhIEZpZWxkIFN0YXJ0cyAtLS0tLS0tLS0tLS0gLS0+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiZmllbGRUeXBlLlRFWFRBUkVBXCI+XHJcbiAgICAgICAgICA8Y3VzdG9tLXRleHQtYXJlYS1maWVsZFxyXG4gICAgICAgICAgICBbY2xhc3MuZXJyb3JdPVwiXHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0udG91Y2hlZCBcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPVwiZmllbGQucmVhZG9ubHkgfHwgZm9ybVJlYWRPbmx5XCJcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWdyb3VwX19pbnB1dFwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgICAgIFtpbnB1dElkXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmllbGQucGxhY2Vob2xkZXIhXCJcclxuICAgICAgICAgID48L2N1c3RvbS10ZXh0LWFyZWEtZmllbGQ+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0gVGV4dEFyZWEgRW5kcyAtLS0tLS0tLS0tLS0gLS0+XHJcblxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIFNlbGVjdCBGaWVsZCBTdGFydHMgLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cImZpZWxkVHlwZS5TRUxFQ1RcIj5cclxuICAgICAgICAgIDxjdXN0b20tc2VsZWN0LWZpZWxkXHJcbiAgICAgICAgICAgIFtjbGFzcy5lcnJvcl09XCJcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS50b3VjaGVkXHJcbiAgICAgICAgICAgIFwiXHJcbiAgICAgICAgICAgIFtvcHRpb25zXT1cImZpZWxkLnNlbGVjdD8ub3B0aW9ucyA/PyBbXVwiXHJcbiAgICAgICAgICAgIFtzaG93Q2xlYXJdPVwiZmllbGQuc2VsZWN0Py5zaG93Q2xlYXIgPz8gZmFsc2VcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPVwiZmllbGQucmVhZG9ubHkgfHwgZm9ybVJlYWRPbmx5XCJcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWdyb3VwX19pbnB1dFwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgICAgIFtpbnB1dElkXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmllbGQucGxhY2Vob2xkZXIhXCJcclxuICAgICAgICAgID48L2N1c3RvbS1zZWxlY3QtZmllbGQ+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0gU2VsZWN0IEZpZWxkIEVuZHMgLS0tLS0tLS0tLS0tIC0tPlxyXG5cclxuICAgICAgICA8IS0tIC0tLS0tLS0tLS0tLSBNdWx0aSBTZWxlY3QgRmllbGQgU3RhcnRzIC0tLS0tLS0tLS0tLSAtLT5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCJmaWVsZFR5cGUuTVVMVElfU0VMRUNUXCI+XHJcbiAgICAgICAgICA8Y3VzdG9tLXNlbGVjdC1maWVsZFxyXG4gICAgICAgICAgICBbY2xhc3MuZXJyb3JdPVwiXHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0udG91Y2hlZFwiXHJcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJmaWVsZC5yZWFkb25seSB8fCBmb3JtUmVhZE9ubHlcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tZ3JvdXBfX2lucHV0XCJcclxuICAgICAgICAgICAgW29wdGlvbnNdPVwiZmllbGQuc2VsZWN0Py5vcHRpb25zID8/IFtdXCJcclxuICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5uYW1lXCJcclxuICAgICAgICAgICAgW2lucHV0SWRdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgICAgIFttdWx0aVNlbGVjdF09XCJ0cnVlXCJcclxuICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cImZpZWxkLnBsYWNlaG9sZGVyIVwiXHJcbiAgICAgICAgICA+PC9jdXN0b20tc2VsZWN0LWZpZWxkPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwhLS0gLS0tLS0tLS0tLS0tIE11bHRpIFNlbGVjdCBGaWVsZCBFbmRzIC0tLS0tLS0tLS0tLSAtLT5cclxuXHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0gRmlsZSBGaWVsZCBTdGFydHMgLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cImZpZWxkVHlwZS5GSUxFX1VQTE9BRFwiPlxyXG4gICAgICAgICAgPGN1c3RvbS1maWxlLXVwbG9hZFxyXG4gICAgICAgICAgICAgICAgICBbY2xhc3MuZXJyb3JdPVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLnRvdWNoZWRcIlxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tZ3JvdXBfX2lucHV0XCJcclxuICAgICAgICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5uYW1lXCJcclxuICAgICAgICAgICAgICAgICAgW2FjY2VwdF09XCJmaWVsZC5maWxlPy5hY2NlcHQhXCJcclxuICAgICAgICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cImZpZWxkLnBsYWNlaG9sZGVyIVwiXHJcbiAgICAgICAgICA+PC9jdXN0b20tZmlsZS11cGxvYWQ+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0gRmlsZSBGaWVsZCBFbmRzIC0tLS0tLS0tLS0tLSAtLT5cclxuXHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0tLSBFZGdlIENhc2UgU3RhcnRzIC0tLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDwhLS0gVGhpcyBpcyBmb3IgcGFzc2luZyBpZCBhcyBmb3JtIHZhbHVlIGlmIG5lZWRlZCAtLT5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCJmaWVsZFR5cGUuSU5WSVNJQkxFXCI+PC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0tLS0gRWRnZSBDYXNlIEVuZHMgLS0tLS0tLS0tLS0tLS0tIC0tPlxyXG5cclxuICAgICAgICA8IS0tIC0tLS0tLS0tLS0tLS0tIERlZmF1bHQgQ2FzZSBTdGFydHMgKENsYXNzaWMgaW5wdXQpIC0tLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoRGVmYXVsdD5cclxuICAgICAgICAgIDxjdXN0b20tdGV4dC1maWVsZFxyXG4gICAgICAgICAgICBbY2xhc3MuZXJyb3JdPVwiXHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHNbZmllbGQubmFtZV0udG91Y2hlZFxyXG4gICAgICAgICAgICBcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPVwiZmllbGQucmVhZG9ubHkgfHwgZm9ybVJlYWRPbmx5XCJcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWdyb3VwX19pbnB1dFwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiZmllbGQubmFtZVwiXHJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJmaWVsZC5wbGFjZWhvbGRlciB8fCAnJ1wiXHJcbiAgICAgICAgICAgIFtpY29uXT1cImZpZWxkLmF0dHJzPy5pY29uIFwiXHJcbiAgICAgICAgICAgIFtpY29uUG9zaXRpb25dPVwiZmllbGQuYXR0cnM/Lmljb25Qb3NpdGlvbiBcIlxyXG4gICAgICAgICAgICBbdHlwZV09XCJmaWVsZC5hdHRycz8udHlwZVwiXHJcbiAgICAgICAgICAgIFtpbnB1dElkXT1cImZpZWxkLm5hbWVcIlxyXG4gICAgICAgICAgICBbbG9hZGluZyRdPVwidGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLnN0YXR1c0NoYW5nZXNcIlxyXG4gICAgICAgICAgPjwvY3VzdG9tLXRleHQtZmllbGQ+XHJcbjwhLS0gICAgICAgICAgPHByZT57e3RoaXMuZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS5lcnJvcnMgfCBqc29ufX08L3ByZT4tLT5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8IS0tIC0tLS0tLS0tLS0tLS0tIERlZmF1bHQgQ2FzZSBFbmRzIChDbGFzc2ljIGlucHV0KSAtLS0tLS0tLS0tLS0tLSAtLT5cclxuXHJcblxyXG5cclxuICAgICAgICA8IS0tIC0tLS0tLS0tLS0tLS0tIEZvcm1Db250cm9sIChGaWVsZCkgRXJyb3IgU3RhcnRzIC0tLS0tLS0tLS0tLS0tIC0tPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGVycm9yIG9mIChmaWVsZC5lcnJvcnMgPz8gW10pLmNvbmNhdCh0aGlzLmRlZmF1bHRFcnJvcnMpXCI+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdLmhhc0Vycm9yKGVycm9yLnR5cGUpICYmICAhZmllbGQucmVhZG9ubHkgJiYgIWZvcm1SZWFkT25seVwiPlxyXG4gICAgICAgICAgPCEtLSBDb21tb24gZXJyb3IgLS0+XHJcbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJlcnJvci1tZXNzYWdlXCIgKm5nSWY9XCIhZXJyb3I/LnNob3dPblN1Ym1pdFwiPnt7IGZpZWxkLmxhYmVsIH19IHt7IGVycm9yLm1lc3NhZ2UgfX08L3NtYWxsPlxyXG5cclxuICAgICAgICAgIDwhLS0gRXJyb3Igc2hvd2VkIG9uIHN1Ym1pdC0tPlxyXG4gICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiICpuZ0lmPVwiZXJyb3I/LnNob3dPblN1Ym1pdCAmJiAodGhpcy5mb3JtU3VibWl0dGVkJCB8IGFzeW5jKVwiPnt7IGZpZWxkLmxhYmVsIH19IHt7IGVycm9yLm1lc3NhZ2UgfX08L3NtYWxsPlxyXG5cclxuICAgICAgICAgICAgPCEtLSBFcnJvciBmb3IgbWF4bGVuZ3RoIC0tPlxyXG48IS0tICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgKm5nSWY9XCIhZXJyb3I/LnNob3dPblN1Ym1pdCAmJiBlcnJvci50eXBlID09PSAnbWF4bGVuZ3RoJyAmJiBmb3JtLmNvbnRyb2xzW2ZpZWxkLm5hbWVdPy5lcnJvcnM/LlsnbWF4bGVuZ3RoJ11cIi0tPlxyXG48IS0tICAgICAgICAgICAgPi0tPlxyXG48IS0tICAgICAgICAgICAgICBUaGUgbWF4aW11bSB2YWx1ZSBhbGxvd2VkIGlzIHt7IGZvcm0uY29udHJvbHNbZmllbGQubmFtZV0uZXJyb3JzPy5bJ21heGxlbmd0aCddPy5bJ3JlcXVpcmVkTGVuZ3RoJ10gfX0uIEhvd2V2ZXIsIHRoZSBhY3R1YWwgdmFsdWUgcHJvdmlkZWQgaXMge3sgZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS5lcnJvcnM/LlsnbWF4bGVuZ3RoJ10/LlsnYWN0dWFsTGVuZ3RoJ10gfX0uIFBsZWFzZSBwcm92aWRlIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUuLS0+XHJcbjwhLS0gICAgICAgICAgICA8L3NtYWxsPi0tPlxyXG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPCEtLSAtLS0tLS0tLS0tLS0tLSBGb3JtQ29udHJvbCAoRmllbGQpIEVycm9yIEVuZHMgLS0tLS0tLS0tLS0tLS0gLS0+XHJcblxyXG5cclxuICAgICAgICA8IS0tIEZvcm1Db250cm9sIChGaWVsZCkgXCIuZ3JvdXBFcnJvcnNbXVwiIFN0YXJ0cyAtLT5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZmllbGQuZ3JvdXBFcnJvcnNcIj5cclxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGdyb3VwRXJyb3Igb2YgZmllbGQuZ3JvdXBFcnJvcnNcIj5cclxuICAgICAgICAgICAgPHNtYWxsXHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJncm91cC1lcnJvci1tZXNzYWdlXCJcclxuICAgICAgICAgICAgICAqbmdJZj1cIlxyXG4gICAgICAgICAgICBmb3JtLmludmFsaWQgJiZcclxuICAgICAgICAgICAgZm9ybS5oYXNFcnJvcihncm91cEVycm9yLnR5cGUpICYmXHJcbiAgICAgICAgICAgIGZvcm0uY29udHJvbHNbZmllbGQubmFtZV0udG91Y2hlZCAmJlxyXG4gICAgICAgICAgICAhZm9ybS5jb250cm9sc1tmaWVsZC5uYW1lXS5lcnJvcnMgJiZcclxuICAgICAgICAgICAgIWdyb3VwRXJyb3I/LnNob3dPblN1Ym1pdCAmJlxyXG4gICAgICAgICAgICAoZm9ybVN1Ym1pdHRlZCQgfCBhc3luYylcclxuICAgICAgICAgIFwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7eyBncm91cEVycm9yLm1lc3NhZ2UgfX1cclxuICAgICAgICAgICAgPC9zbWFsbD5cclxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwhLS0gRm9ybUNvbnRyb2wgKEZpZWxkKSBcIi5ncm91cEVycm9yc1tdXCIgRW5kcyAtLT5cclxuXHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcbiAgPC9kaXY+XHJcblxyXG5cclxuPCEtLSAgICBGSVhNRSA6IEkgc2hvdWxkIHdyaXRlIGNzcyB0byBoaWRlIHRoaXMgZXJyb3IgaWYgdGhlcmUgaXMgYSBmaWVsZCByZWxhdGVkIGVycm9yIGJlaW5nIHNob3dlZC0tPlxyXG4gIDwhLS0gRXJyb3JzIGFzc29jaWF0ZWQgdG8gRm9ybUdyb3VwIFN0YXJ0cyAtLT5cclxuPCEtLSAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAtZXJyb3JzXCIgKm5nSWY9XCJmb3JtLmludmFsaWQgJiYgZm9ybS5lcnJvcnNcIj4tLT5cclxuPCEtLSAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBmaWVsZCBvZiBzdHJ1Y3R1cmUkIHwgYXN5bmNcIj4tLT5cclxuPCEtLSAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhZmllbGQubmFtZSAmJiBmaWVsZC5lcnJvcnNcIj4tLT5cclxuPCEtLSAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgZXJyb3Igb2YgZmllbGQuZXJyb3JzXCI+LS0+XHJcbjwhLS0gICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiICpuZ0lmPVwiZm9ybS5oYXNFcnJvcihlcnJvci50eXBlKVwiPi0tPlxyXG48IS0tICAgICAgICAgICAgICB7eyBlcnJvci5tZXNzYWdlIH19LS0+XHJcbjwhLS0gICAgICAgICAgPC9zbWFsbD4tLT5cclxuPCEtLSAgICAgICAgPC9uZy1jb250YWluZXI+LS0+XHJcbjwhLS0gICAgICA8L25nLWNvbnRhaW5lcj4tLT5cclxuPCEtLSAgICA8L25nLWNvbnRhaW5lcj4tLT5cclxuPCEtLSAgPC9kaXY+LS0+XHJcbiAgPCEtLSBFcnJvcnMgYXNzb2NpYXRlZCB0byBGb3JtR3JvdXAgZW5kcyAtLT5cclxuXHJcbjwvZm9ybT5cclxuIl19