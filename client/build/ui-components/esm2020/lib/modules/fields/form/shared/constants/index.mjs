export const FieldType = {
    TEXT: 'text',
    NUMBER: 'number',
    DATE: 'date',
    SELECT: 'select',
    MULTI_SELECT: 'multi_select',
    CHECK: 'check',
    TEXTAREA: 'textarea',
    FILE_UPLOAD: 'file_upload',
    FORM_GROUP: 'form',
    INVISIBLE: null
};
export const defaultFieldValues = {
    TEXT: '',
    TEXTAREA: '',
    CHECK: false,
    NUMBER: null,
    DATE: null,
    SELECT: null,
    MULTI_SELECT: null,
    FILE_UPLOAD: null,
    FORM_GROUP: null,
    INVISIBLE: null
};
export const DEFAULT_ERROR_TYPES = [
    { type: 'required', message: 'is required.', showOnSubmit: false },
    { type: 'minlength', message: 'minimum length error.', showOnSubmit: false },
    { type: 'maxlength', message: 'maximum length exceeded.', showOnSubmit: false },
    { type: 'hasLowerCase', message: 'requires at least one lower case letter.', showOnSubmit: false },
    { type: 'hasUppercase', message: 'requires at least one upper case letter.', showOnSubmit: false },
    { type: 'hasNumeric', message: 'requires at least one numeric character.', showOnSubmit: false },
    { type: 'passwordsNotMatch', message: 'Passwords should match', showOnSubmit: false },
    { type: 'alphanumericPattern', message: 'should contain only alphanumeric characters', showOnSubmit: false },
    { type: 'whitespacePattern', message: 'does not accept spaces', showOnSubmit: false },
    { type: 'emailPattern', message: 'invalid', showOnSubmit: false },
    { type: 'whitespacePattern', message: 'should not contain spaces', showOnSubmit: false },
    { type: 'usernameExists', message: 'Username already exists.', showOnSubmit: false },
    { type: 'emailExists', message: 'already exists.', showOnSubmit: false },
    { type: 'invalidCredentials', message: 'Invalid credentials.', showOnSubmit: true },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1jb21wb25lbnRzL3NyYy9saWIvbW9kdWxlcy9maWVsZHMvZm9ybS9zaGFyZWQvY29uc3RhbnRzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN4QixJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLFFBQVE7SUFDZixZQUFZLEVBQUcsY0FBYztJQUM5QixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFdBQVcsRUFBRSxhQUFhO0lBQ3pCLFVBQVUsRUFBRyxNQUFNO0lBQ3BCLFNBQVMsRUFBRyxJQUFJO0NBQ1AsQ0FBQztBQUVYLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUE2QztJQUMzRSxJQUFJLEVBQUUsRUFBRTtJQUNSLFFBQVEsRUFBRSxFQUFFO0lBQ1osS0FBSyxFQUFFLEtBQUs7SUFDWixNQUFNLEVBQUUsSUFBSTtJQUNaLElBQUksRUFBRSxJQUFJO0lBQ1YsTUFBTSxFQUFFLElBQUk7SUFDWixZQUFZLEVBQUUsSUFBSTtJQUNsQixXQUFXLEVBQUUsSUFBSTtJQUNqQixVQUFVLEVBQUUsSUFBSTtJQUNoQixTQUFTLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFJRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRyxZQUFZLEVBQUcsS0FBSyxFQUFHO0lBQ3JFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFHLEtBQUssRUFBRztJQUM5RSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFlBQVksRUFBRyxLQUFLLEVBQUc7SUFDakYsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSwwQ0FBMEMsRUFBRyxZQUFZLEVBQUcsS0FBSyxFQUFDO0lBQ25HLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsMENBQTBDLEVBQUcsWUFBWSxFQUFHLEtBQUssRUFBQztJQUNuRyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLDBDQUEwQyxFQUFHLFlBQVksRUFBRyxLQUFLLEVBQUU7SUFDbEcsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFHLFlBQVksRUFBRyxLQUFLLEVBQUM7SUFDdEYsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxFQUFFLDZDQUE2QyxFQUFHLFlBQVksRUFBRyxLQUFLLEVBQUM7SUFDN0csRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFHLFlBQVksRUFBRyxLQUFLLEVBQUM7SUFDdEYsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUcsWUFBWSxFQUFHLEtBQUssRUFBQztJQUNsRSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUcsWUFBWSxFQUFHLEtBQUssRUFBQztJQUN6RixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsWUFBWSxFQUFHLEtBQUssRUFBRTtJQUNyRixFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRyxLQUFLLEVBQUU7SUFDekUsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRyxJQUFJLEVBQUU7Q0FHckYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBGaWVsZFR5cGUgPSB7XHJcblx0VEVYVDogJ3RleHQnLFxyXG5cdE5VTUJFUjogJ251bWJlcicsXHJcblx0REFURTogJ2RhdGUnLFxyXG5cdFNFTEVDVDogJ3NlbGVjdCcsXHJcbiAgTVVMVElfU0VMRUNUIDogJ211bHRpX3NlbGVjdCcsXHJcblx0Q0hFQ0s6ICdjaGVjaycsXHJcblx0VEVYVEFSRUE6ICd0ZXh0YXJlYScsXHJcblx0RklMRV9VUExPQUQ6ICdmaWxlX3VwbG9hZCcsXHJcbiAgRk9STV9HUk9VUCA6ICdmb3JtJyxcclxuXHRJTlZJU0lCTEUgOiBudWxsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdEZpZWxkVmFsdWVzOiB7IFtrZXkgaW4ga2V5b2YgdHlwZW9mIEZpZWxkVHlwZV06IGFueSB9ID0ge1xyXG5cdFRFWFQ6ICcnLFxyXG5cdFRFWFRBUkVBOiAnJyxcclxuXHRDSEVDSzogZmFsc2UsXHJcblx0TlVNQkVSOiBudWxsLFxyXG5cdERBVEU6IG51bGwsXHJcblx0U0VMRUNUOiBudWxsLFxyXG5cdE1VTFRJX1NFTEVDVDogbnVsbCxcclxuXHRGSUxFX1VQTE9BRDogbnVsbCxcclxuXHRGT1JNX0dST1VQOiBudWxsLFxyXG5cdElOVklTSUJMRTogbnVsbFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRmllbGRUeXBlID0gdHlwZW9mIEZpZWxkVHlwZVtrZXlvZiB0eXBlb2YgRmllbGRUeXBlXTtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VSUk9SX1RZUEVTID0gW1xyXG4gIHsgdHlwZTogJ3JlcXVpcmVkJywgbWVzc2FnZTogJ2lzIHJlcXVpcmVkLicgLCBzaG93T25TdWJtaXQgOiBmYWxzZSAgfSxcclxuICB7IHR5cGU6ICdtaW5sZW5ndGgnLCBtZXNzYWdlOiAnbWluaW11bSBsZW5ndGggZXJyb3IuJywgc2hvd09uU3VibWl0IDogZmFsc2UgIH0sXHJcbiAgeyB0eXBlOiAnbWF4bGVuZ3RoJywgbWVzc2FnZTogJ21heGltdW0gbGVuZ3RoIGV4Y2VlZGVkLicsIHNob3dPblN1Ym1pdCA6IGZhbHNlICB9LFxyXG4gIHsgdHlwZTogJ2hhc0xvd2VyQ2FzZScsIG1lc3NhZ2U6ICdyZXF1aXJlcyBhdCBsZWFzdCBvbmUgbG93ZXIgY2FzZSBsZXR0ZXIuJyAsIHNob3dPblN1Ym1pdCA6IGZhbHNlfSxcclxuICB7IHR5cGU6ICdoYXNVcHBlcmNhc2UnLCBtZXNzYWdlOiAncmVxdWlyZXMgYXQgbGVhc3Qgb25lIHVwcGVyIGNhc2UgbGV0dGVyLicgLCBzaG93T25TdWJtaXQgOiBmYWxzZX0sXHJcbiAgeyB0eXBlOiAnaGFzTnVtZXJpYycsIG1lc3NhZ2U6ICdyZXF1aXJlcyBhdCBsZWFzdCBvbmUgbnVtZXJpYyBjaGFyYWN0ZXIuJyAsIHNob3dPblN1Ym1pdCA6IGZhbHNlIH0sXHJcbiAgeyB0eXBlOiAncGFzc3dvcmRzTm90TWF0Y2gnLCBtZXNzYWdlOiAnUGFzc3dvcmRzIHNob3VsZCBtYXRjaCcgLCBzaG93T25TdWJtaXQgOiBmYWxzZX0sXHJcbiAgeyB0eXBlOiAnYWxwaGFudW1lcmljUGF0dGVybicsIG1lc3NhZ2U6ICdzaG91bGQgY29udGFpbiBvbmx5IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzJyAsIHNob3dPblN1Ym1pdCA6IGZhbHNlfSxcclxuICB7IHR5cGU6ICd3aGl0ZXNwYWNlUGF0dGVybicsIG1lc3NhZ2U6ICdkb2VzIG5vdCBhY2NlcHQgc3BhY2VzJyAsIHNob3dPblN1Ym1pdCA6IGZhbHNlfSxcclxuICB7IHR5cGU6ICdlbWFpbFBhdHRlcm4nLCBtZXNzYWdlOiAnaW52YWxpZCcgLCBzaG93T25TdWJtaXQgOiBmYWxzZX0sXHJcbiAgeyB0eXBlOiAnd2hpdGVzcGFjZVBhdHRlcm4nLCBtZXNzYWdlOiAnc2hvdWxkIG5vdCBjb250YWluIHNwYWNlcycgLCBzaG93T25TdWJtaXQgOiBmYWxzZX0sXHJcbiAgeyB0eXBlOiAndXNlcm5hbWVFeGlzdHMnLCBtZXNzYWdlOiAnVXNlcm5hbWUgYWxyZWFkeSBleGlzdHMuJywgc2hvd09uU3VibWl0IDogZmFsc2UgfSxcclxuICB7IHR5cGU6ICdlbWFpbEV4aXN0cycsIG1lc3NhZ2U6ICdhbHJlYWR5IGV4aXN0cy4nLCBzaG93T25TdWJtaXQgOiBmYWxzZSB9LFxyXG4gIHsgdHlwZTogJ2ludmFsaWRDcmVkZW50aWFscycsIG1lc3NhZ2U6ICdJbnZhbGlkIGNyZWRlbnRpYWxzLicsIHNob3dPblN1Ym1pdCA6IHRydWUgfSxcclxuXHJcblxyXG5dO1xyXG4iXX0=