import { ChangeDetectionStrategy, Component, inject, Input } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RouteConfigLoadEnd, RouteConfigLoadStart, Router, } from "@angular/router";
import { BehaviorSubject } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/progressspinner";
export class LoadingComponent {
    constructor() {
        this.router = inject(Router);
        this.isFullScreen = true;
        this.text = 'Cargando...';
        this.auto = false;
        // Detects whenever a routing transition is happening
        this.detectRoutingOnGoing = false;
        this.show$ = new BehaviorSubject(true);
    }
    ngOnInit() {
        if (this.detectRoutingOnGoing) {
            this.router.events.subscribe(event => {
                //console.log("Event type:", event.constructor.name);
                if (event instanceof NavigationStart ||
                    event instanceof RouteConfigLoadStart) {
                    this.show$.next(true);
                }
                else if (event instanceof NavigationEnd ||
                    event instanceof NavigationError ||
                    event instanceof NavigationCancel ||
                    event instanceof RouteConfigLoadEnd) {
                    this.show$.next(false);
                }
            });
        }
    }
}
LoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: LoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: LoadingComponent, selector: "loading", inputs: { isFullScreen: ["fullScreen", "isFullScreen"], text: "text", auto: "auto", detectRoutingOnGoing: "detectRoutingOnGoing" }, ngImport: i0, template: "<div class=\"overlay flex-center\" [class.overlay--full-screen]=\"isFullScreen\" *ngIf=\"this.show$ | async\">\r\n    <div class=\"loader flex-center\">\r\n        <p-progressSpinner\r\n                class=\"loader__spinner\"\r\n                [style]=\"{ width: '50px', height: '50px' }\"\r\n                styleClass=\"custom-spinner\"\r\n                strokeWidth=\"4\"\r\n                animationDuration=\"1.65s\"\r\n                [class.loader__spinner--full-screen]=\"isFullScreen\"\r\n        ></p-progressSpinner>\r\n        <span\r\n                class=\"loader__text\"\r\n                [class.loader__text--full-screen]=\"isFullScreen\"\r\n        >{{ text }}</span\r\n        >\r\n    </div>\r\n</div>\r\n", styles: [".overlay{position:absolute;inset:0;z-index:99999999}.overlay--full-screen{position:fixed;background-color:#00000087}.overlay .loader__text{color:#4f5c67;display:block;font-size:16px;margin-top:3px;font-weight:500}.overlay .loader__text--full-screen{color:#fff}.flex-center{display:flex;flex-direction:column;justify-content:center;align-items:center}:host ::ng-deep .loader__spinner--full-screen .p-progress-spinner-circle{stroke:#fff!important}:host ::ng-deep .p-progress-spinner-circle{stroke:#384495!important}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.ProgressSpinner, selector: "p-progressSpinner", inputs: ["style", "styleClass", "strokeWidth", "fill", "animationDuration"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: LoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'loading', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"overlay flex-center\" [class.overlay--full-screen]=\"isFullScreen\" *ngIf=\"this.show$ | async\">\r\n    <div class=\"loader flex-center\">\r\n        <p-progressSpinner\r\n                class=\"loader__spinner\"\r\n                [style]=\"{ width: '50px', height: '50px' }\"\r\n                styleClass=\"custom-spinner\"\r\n                strokeWidth=\"4\"\r\n                animationDuration=\"1.65s\"\r\n                [class.loader__spinner--full-screen]=\"isFullScreen\"\r\n        ></p-progressSpinner>\r\n        <span\r\n                class=\"loader__text\"\r\n                [class.loader__text--full-screen]=\"isFullScreen\"\r\n        >{{ text }}</span\r\n        >\r\n    </div>\r\n</div>\r\n", styles: [".overlay{position:absolute;inset:0;z-index:99999999}.overlay--full-screen{position:fixed;background-color:#00000087}.overlay .loader__text{color:#4f5c67;display:block;font-size:16px;margin-top:3px;font-weight:500}.overlay .loader__text--full-screen{color:#fff}.flex-center{display:flex;flex-direction:column;justify-content:center;align-items:center}:host ::ng-deep .loader__spinner--full-screen .p-progress-spinner-circle{stroke:#fff!important}:host ::ng-deep .p-progress-spinner-circle{stroke:#384495!important}\n"] }]
        }], propDecorators: { isFullScreen: [{
                type: Input,
                args: ['fullScreen']
            }], text: [{
                type: Input
            }], auto: [{
                type: Input
            }], detectRoutingOnGoing: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1jb21wb25lbnRzL3NyYy9saWIvbW9kdWxlcy9kYXRhL2xvYWRpbmcvbG9hZGluZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1jb21wb25lbnRzL3NyYy9saWIvbW9kdWxlcy9kYXRhL2xvYWRpbmcvbG9hZGluZy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUNMLGdCQUFnQixFQUFFLGFBQWEsRUFDL0IsZUFBZSxFQUNmLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLE1BQU0sR0FDUCxNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7QUFRckMsTUFBTSxPQUFPLGdCQUFnQjtJQU43QjtRQU9VLFdBQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFWCxpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNoQyxTQUFJLEdBQUcsYUFBYSxDQUFDO1FBQ3JCLFNBQUksR0FBRyxLQUFLLENBQUM7UUFFdEIscURBQXFEO1FBQzVDLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQUV0QyxVQUFLLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUE7S0F3QjNDO0lBdEJDLFFBQVE7UUFDTixJQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBQztZQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25DLHFEQUFxRDtnQkFDckQsSUFDRSxLQUFLLFlBQWEsZUFBZTtvQkFDakMsS0FBSyxZQUFZLG9CQUFvQixFQUN0QztvQkFDQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtpQkFDdEI7cUJBQ0ksSUFDSCxLQUFLLFlBQVksYUFBYTtvQkFDOUIsS0FBSyxZQUFZLGVBQWU7b0JBQ2hDLEtBQUssWUFBWSxnQkFBZ0I7b0JBQ2pDLEtBQUssWUFBWSxrQkFBa0IsRUFDcEM7b0JBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7aUJBQ3ZCO1lBQ0gsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7OzZHQWhDVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQixtTENqQjdCLDR0QkFpQkE7MkZEQWEsZ0JBQWdCO2tCQU41QixTQUFTOytCQUNFLFNBQVMsbUJBR0YsdUJBQXVCLENBQUMsTUFBTTs4QkFLMUIsWUFBWTtzQkFBaEMsS0FBSzt1QkFBQyxZQUFZO2dCQUNWLElBQUk7c0JBQVosS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBR0csb0JBQW9CO3NCQUE1QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FbmQsXHJcbiAgTmF2aWdhdGlvbkVycm9yLFxyXG4gIE5hdmlnYXRpb25TdGFydCxcclxuICBSb3V0ZUNvbmZpZ0xvYWRFbmQsXHJcbiAgUm91dGVDb25maWdMb2FkU3RhcnQsXHJcbiAgUm91dGVyLCBTY3JvbGwsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSBcInJ4anNcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbG9hZGluZycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2xvYWRpbmcuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2xvYWRpbmcuY29tcG9uZW50LnNjc3MnXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9hZGluZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdHtcclxuICBwcml2YXRlIHJvdXRlciA9IGluamVjdChSb3V0ZXIpO1xyXG4gIFxyXG4gIEBJbnB1dCgnZnVsbFNjcmVlbicpIGlzRnVsbFNjcmVlbiA9IHRydWU7XHJcbiAgQElucHV0KCkgdGV4dCA9ICdDYXJnYW5kby4uLic7XHJcbiAgQElucHV0KCkgYXV0byA9IGZhbHNlO1xyXG4gIFxyXG4gIC8vIERldGVjdHMgd2hlbmV2ZXIgYSByb3V0aW5nIHRyYW5zaXRpb24gaXMgaGFwcGVuaW5nXHJcbiAgQElucHV0KCkgZGV0ZWN0Um91dGluZ09uR29pbmcgPSBmYWxzZTtcclxuICBcclxuICBzaG93JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSlcclxuICBcclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmKHRoaXMuZGV0ZWN0Um91dGluZ09uR29pbmcpe1xyXG4gICAgICB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKGV2ZW50ID0+e1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJFdmVudCB0eXBlOlwiLCBldmVudC5jb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBldmVudCBpbnN0YW5jZW9mICBOYXZpZ2F0aW9uU3RhcnQgfHxcclxuICAgICAgICAgIGV2ZW50IGluc3RhbmNlb2YgUm91dGVDb25maWdMb2FkU3RhcnRcclxuICAgICAgICApe1xyXG4gICAgICAgICAgdGhpcy5zaG93JC5uZXh0KHRydWUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kIHx8XHJcbiAgICAgICAgICBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FcnJvciB8fFxyXG4gICAgICAgICAgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsIHx8XHJcbiAgICAgICAgICBldmVudCBpbnN0YW5jZW9mIFJvdXRlQ29uZmlnTG9hZEVuZFxyXG4gICAgICAgICl7XHJcbiAgICAgICAgICB0aGlzLnNob3ckLm5leHQoZmFsc2UpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxufVxyXG4iLCI8ZGl2IGNsYXNzPVwib3ZlcmxheSBmbGV4LWNlbnRlclwiIFtjbGFzcy5vdmVybGF5LS1mdWxsLXNjcmVlbl09XCJpc0Z1bGxTY3JlZW5cIiAqbmdJZj1cInRoaXMuc2hvdyQgfCBhc3luY1wiPlxyXG4gICAgPGRpdiBjbGFzcz1cImxvYWRlciBmbGV4LWNlbnRlclwiPlxyXG4gICAgICAgIDxwLXByb2dyZXNzU3Bpbm5lclxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsb2FkZXJfX3NwaW5uZXJcIlxyXG4gICAgICAgICAgICAgICAgW3N0eWxlXT1cInsgd2lkdGg6ICc1MHB4JywgaGVpZ2h0OiAnNTBweCcgfVwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZUNsYXNzPVwiY3VzdG9tLXNwaW5uZXJcIlxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCI0XCJcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uPVwiMS42NXNcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmxvYWRlcl9fc3Bpbm5lci0tZnVsbC1zY3JlZW5dPVwiaXNGdWxsU2NyZWVuXCJcclxuICAgICAgICA+PC9wLXByb2dyZXNzU3Bpbm5lcj5cclxuICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsb2FkZXJfX3RleHRcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmxvYWRlcl9fdGV4dC0tZnVsbC1zY3JlZW5dPVwiaXNGdWxsU2NyZWVuXCJcclxuICAgICAgICA+e3sgdGV4dCB9fTwvc3BhblxyXG4gICAgICAgID5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuIl19